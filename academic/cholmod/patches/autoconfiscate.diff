diff --git a/Check/Makefile.am b/Check/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Check/Makefile.am
@@ -0,0 +1,27 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	lesser.txt
+
+CHECKSRC = \
+	cholmod_check.c \
+	cholmod_read.c \
+	cholmod_write.c
+
+noinst_LTLIBRARIES = \
+	libchecki.la \
+	libcheckl.la \
+	libcheck.la
+
+libchecki_la_SOURCES = $(CHECKSRC)
+libchecki_la_LIBADD = $(SUITESPARSECONFIG_LIBS) $(CODE_COVERAGE_LIBS)
+libchecki_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libchecki_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcheckl_la_SOURCES = $(CHECKSRC)
+libcheckl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) $(CODE_COVERAGE_LIBS)
+libcheckl_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libcheckl_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcheck_la_SOURCES =
+libcheck_la_LIBADD = libchecki.la libcheckl.la
diff --git a/Cholesky/Makefile.am b/Cholesky/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Cholesky/Makefile.am
@@ -0,0 +1,42 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(COLAMD_CFLAGS) $(AMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	lesser.txt
+
+CHOLESKYSRC = \
+	cholmod_amd.c \
+	cholmod_analyze.c \
+	cholmod_colamd.c \
+	cholmod_etree.c \
+	cholmod_factorize.c \
+	cholmod_postorder.c \
+	cholmod_rcond.c \
+	cholmod_resymbol.c \
+	cholmod_rowcolcounts.c \
+	cholmod_rowfac.c \
+	cholmod_solve.c \
+	cholmod_spsolve.c
+
+noinst_HEADERS = \
+	t_cholmod_lsolve.c \
+	t_cholmod_ltsolve.c \
+	t_cholmod_rowfac.c \
+	t_cholmod_solve.c
+
+noinst_LTLIBRARIES = \
+	libcholeskyi.la \
+	libcholeskyl.la \
+	libcholesky.la
+
+libcholeskyi_la_SOURCES = $(CHOLESKYSRC)
+libcholeskyi_la_LIBADD = $(COLAMD_LIBS) $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libcholeskyi_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libcholeskyi_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcholeskyl_la_SOURCES = $(CHOLESKYSRC)
+libcholeskyl_la_LIBADD = $(COLAMD_LIBS) $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libcholeskyl_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libcholeskyl_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcholesky_la_SOURCES =
+libcholesky_la_LIBADD = libcholeskyi.la libcholeskyl.la
diff --git a/Core/Makefile.am b/Core/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Core/Makefile.am
@@ -0,0 +1,45 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	lesser.txt
+
+CORESRC = \
+	cholmod_aat.c \
+	cholmod_add.c \
+	cholmod_band.c \
+	cholmod_change_factor.c \
+	cholmod_common.c \
+	cholmod_complex.c \
+	cholmod_copy.c \
+	cholmod_dense.c \
+	cholmod_error.c \
+	cholmod_factor.c \
+	cholmod_memory.c \
+	cholmod_sparse.c \
+	cholmod_transpose.c \
+	cholmod_triplet.c \
+	cholmod_version.c
+
+noinst_HEADERS = \
+	t_cholmod_change_factor.c \
+	t_cholmod_dense.c \
+	t_cholmod_transpose.c \
+	t_cholmod_triplet.c
+
+noinst_LTLIBRARIES = \
+	libcorei.la \
+	libcorel.la \
+	libcore.la
+
+libcorei_la_SOURCES = $(CORESRC)
+libcorei_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libcorei_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libcorei_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcorel_la_SOURCES = $(CORESRC)
+libcorel_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libcorel_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libcorel_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libcore_la_SOURCES =
+libcore_la_LIBADD = libcorei.la libcorel.la
diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,142 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	README.txt \
+	gpl.txt
+
+dist_noinst_DATA = \
+	Matrix/0.tri \
+	Matrix/bcsstk01.tri \
+	Matrix/bcsstk02.tri \
+	Matrix/c.mtx \
+	Matrix/c.tri \
+	Matrix/can___24.mtx \
+	Matrix/d.tri \
+	Matrix/empty.tri \
+	Matrix/lp_afiro.tri \
+	Matrix/mangle1.mtx \
+	Matrix/mangle2.mtx \
+	Matrix/mangle3.mtx \
+	Matrix/mangle4.mtx \
+	Matrix/mangle5.tri \
+	Matrix/mangle6.tri \
+	Matrix/mangle7.tri \
+	Matrix/mangle8.tri \
+	Matrix/one.tri \
+	Matrix/pts5ldd03.mtx \
+	Matrix/up.tri
+
+noinst_PROGRAMS = \
+	reade \
+	readhb \
+	readhb2
+
+reade_SOURCES = reade.f
+readhb_SOURCES = readhb.f
+readhb2_SOURCES = readhb2.f
+
+if MOD_CHECK
+if MOD_CHOLESKY
+
+check_PROGRAMS = \
+	cholmod_demo \
+	cholmod_l_demo \
+	cholmod_simple
+
+cholmod_demo_SOURCES = cholmod_demo.c cholmod_demo.h
+cholmod_demo_LDADD = $(top_builddir)/libcholmod.la $(SUITESPARSECONFIG_LIBS)
+
+cholmod_l_demo_SOURCES = cholmod_l_demo.c cholmod_demo.h
+cholmod_l_demo_LDADD = $(top_builddir)/libcholmod.la $(SUITESPARSECONFIG_LIBS)
+cholmod_l_demo_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+cholmod_simple_SOURCES = cholmod_simple.c
+cholmod_simple_LDADD = $(top_builddir)/libcholmod.la
+
+if !CODE_COVERAGE_ENABLED
+MATRICES = \
+	$(srcdir)/Matrix/bcsstk01.tri \
+	$(srcdir)/Matrix/c.tri \
+	$(srcdir)/Matrix/can___24.mtx \
+	$(srcdir)/Matrix/lp_afiro.tri
+
+check-local: $(check_PROGRAMS) $(MATRICES)
+	./cholmod_demo   < $(srcdir)/Matrix/bcsstk01.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/bcsstk01.tri
+	./cholmod_demo   < $(srcdir)/Matrix/lp_afiro.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/lp_afiro.tri
+	./cholmod_demo   < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_l_demo < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_demo   < $(srcdir)/Matrix/c.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/c.tri
+	./cholmod_simple < $(srcdir)/Matrix/c.tri
+	./cholmod_simple < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_simple < $(srcdir)/Matrix/bcsstk01.tri
+
+else
+MATRICES = \
+	$(srcdir)/Matrix/0.tri \
+	$(srcdir)/Matrix/bcsstk01.tri \
+	$(srcdir)/Matrix/bcsstk02.tri \
+	$(srcdir)/Matrix/c.mtx \
+	$(srcdir)/Matrix/c.tri \
+	$(srcdir)/Matrix/can___24.mtx \
+	$(srcdir)/Matrix/d.tri \
+	$(srcdir)/Matrix/lp_afiro.tri \
+	$(srcdir)/Matrix/mangle1.mtx \
+	$(srcdir)/Matrix/mangle2.mtx \
+	$(srcdir)/Matrix/mangle3.mtx \
+	$(srcdir)/Matrix/mangle4.mtx \
+	$(srcdir)/Matrix/pts5ldd03.mtx \
+	$(srcdir)/Matrix/up.tri \
+	$(top_srcdir)/Tcov/Matrix/3_2 \
+	$(top_srcdir)/Tcov/Matrix/c10 \
+	$(top_srcdir)/Tcov/Matrix/c5lo
+
+check-local: $(check_PROGRAMS) $(MATRICES)
+	./cholmod_demo     $(srcdir)/Matrix/bcsstk01.tri  > demo_k1.out
+	./cholmod_demo     $(srcdir)/Matrix/bcsstk02.tri  > demo_k2.out
+	./cholmod_demo   < $(srcdir)/Matrix/lp_afiro.tri  > demo_afiro.out
+	./cholmod_demo   < $(srcdir)/Matrix/can___24.mtx  > demo_can24.out
+	./cholmod_demo   < $(srcdir)/Matrix/c.tri         > demo_c.out
+	./cholmod_demo   < $(srcdir)/Matrix/d.tri         > demo_d.out
+	./cholmod_demo   < $(srcdir)/Matrix/up.tri        > demo_up.out
+	./cholmod_demo   < $(srcdir)/Matrix/c.mtx         > demo_c_mtx.out
+	./cholmod_demo   < $(srcdir)/Matrix/0.tri         > demo_0.out
+	./cholmod_demo   < $(top_srcdir)/Tcov/Matrix/3_2  > demo_3_2.out
+	./cholmod_demo   < $(top_srcdir)/Tcov/Matrix/c5lo > demo_c5lo.out
+	./cholmod_demo   < $(top_srcdir)/Tcov/Matrix/c10  > demo_c10.out
+	./cholmod_demo     no_such_file                   > demo_no_such_file.out
+	./cholmod_demo     $(srcdir)/Matrix/mangle1.mtx   > demo_mangle1.out
+	./cholmod_demo     $(srcdir)/Matrix/mangle2.mtx   > demo_mangle2.out
+	./cholmod_demo     $(srcdir)/Matrix/mangle3.mtx   > demo_mangle3.out
+	./cholmod_demo     $(srcdir)/Matrix/mangle4.mtx   > demo_mangle4.out
+	./cholmod_demo     $(srcdir)/Matrix/pts5ldd03.mtx > demo_pts5ldd03.out
+	./cholmod_l_demo   $(srcdir)/Matrix/bcsstk01.tri  > ldemo_k1.out
+	./cholmod_l_demo   $(srcdir)/Matrix/bcsstk02.tri  > ldemo_k2.out
+	./cholmod_l_demo < $(srcdir)/Matrix/lp_afiro.tri  > ldemo_afiro.out
+	./cholmod_l_demo < $(srcdir)/Matrix/can___24.mtx  > ldemo_can24.out
+	./cholmod_l_demo < $(srcdir)/Matrix/c.tri         > ldemo_c.out
+	./cholmod_l_demo   $(srcdir)/Matrix/c.tri 1       > ldemo_c_zomplex.out
+	./cholmod_l_demo < $(srcdir)/Matrix/d.tri         > ldemo_d.out
+	./cholmod_l_demo   $(srcdir)/Matrix/d.tri 1       > ldemo_d.out
+	./cholmod_l_demo < $(srcdir)/Matrix/up.tri        > ldemo_up.out
+	./cholmod_l_demo   $(srcdir)/Matrix/up.tri 1      > ldemo_up_zomplex.out
+	./cholmod_l_demo < $(srcdir)/Matrix/c.mtx         > ldemo_c_mtx.out
+	./cholmod_l_demo   $(srcdir)/Matrix/c.mtx 1       > ldemo_c_mtx_zomplex.out
+	./cholmod_l_demo < $(srcdir)/Matrix/0.tri         > ldemo_0.out
+	./cholmod_l_demo < $(top_srcdir)/Tcov/Matrix/3_2  > ldemo_3_2.out
+	./cholmod_l_demo < $(top_srcdir)/Tcov/Matrix/c5lo > ldemo_c5lo.out
+	./cholmod_l_demo < $(top_srcdir)/Tcov/Matrix/c10  > ldemo_c10.out
+	./cholmod_l_demo   no_such_file                   > ldemo_no_such_file.out
+	./cholmod_l_demo   $(srcdir)/Matrix/mangle1.mtx   > ldemo_mangle1.out
+	./cholmod_l_demo   $(srcdir)/Matrix/mangle2.mtx   > ldemo_mangle2.out
+	./cholmod_l_demo   $(srcdir)/Matrix/mangle3.mtx   > ldemo_mangle3.out
+	./cholmod_l_demo   $(srcdir)/Matrix/mangle4.mtx   > ldemo_mangle4.out
+	./cholmod_l_demo   $(srcdir)/Matrix/pts5ldd03.mtx > ldemo_pts5ldd03.out
+endif
+
+endif
+endif
+
+CLEANFILES = timelog.m *.out
diff --git a/Doc/Makefile.am b/Doc/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Doc/Makefile.am
@@ -0,0 +1,442 @@
+EXTRA_DIST = \
+	ChangeLog \
+	License.txt
+
+dist_noinst_DATA = \
+	UserGuide.bib \
+	CHOLMOD_UserGuide.tex \
+	header.tex \
+	footer.tex \
+	mheader.tex \
+	mfooter.tex \
+	mfile.awk \
+	rule.awk
+
+dist_pdf_DATA = \
+	CHOLMOD_UserGuide.pdf
+
+dist_noinst_SCRIPTS = \
+	getmproto \
+	getproto
+
+# ./getmproto file.m > _file_m.tex
+define getmproto =
+( \
+cat $(srcdir)/mheader.tex; \
+expand -8 $< | awk -f $(srcdir)/mfile.awk; \
+cat $(srcdir)/mfooter.tex; \
+) > $@
+endef
+
+# ./getproto 'proto' header.h > _file.tex
+define getproto =
+( \
+echo -n $(PATTERN); \
+cat $(srcdir)/rule.awk; \
+) > $(basename $@).awk
+( \
+cat $(srcdir)/header.tex; \
+expand -8 $< | awk -f $(basename $@).awk; \
+cat $(srcdir)/footer.tex; \
+) > $@
+$(RM) $(basename $@).awk
+endef
+
+PROTO_M = \
+	_analyze_m.tex \
+	_bisect_m.tex \
+	_chol2_m.tex \
+	_cholmod2_m.tex \
+	_cholmod_demo_m.tex \
+	_cholmod_make_m.tex \
+	_etree2_m.tex \
+	_graph_demo_m.tex \
+	_lchol_m.tex \
+	_ldl_normest_m.tex \
+	_ldlchol_m.tex \
+	_ldlsolve_m.tex \
+	_ldlsplit_m.tex \
+	_ldlupdate_m.tex \
+	_ldlrowmod_m.tex \
+	_metis_m.tex \
+	_mread_m.tex \
+	_mwrite_m.tex \
+	_nesdis_m.tex \
+	_resymbol_m.tex \
+	_sdmult_m.tex \
+	_sparse2_m.tex \
+	_spsym_m.tex \
+	_symbfact2_m.tex
+
+$(PROTO_M): mheader.tex mfile.awk mfooter.tex
+_%_m.tex: $(top_srcdir)/MATLAB/%.m
+	$(getmproto)
+
+PROTO_SIMPLE = \
+	_simple.tex
+
+_simple.tex: PATTERN = '/include/, /^}/'
+
+$(PROTO_SIMPLE): $(top_srcdir)/Demo/cholmod_simple.c header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CORE = \
+	_common.tex \
+	_start.tex \
+	_finish.tex \
+	_defaults.tex \
+	_maxrank.tex \
+	_allocate_work.tex \
+	_free_work.tex \
+	_clear_flag.tex \
+	_error.tex \
+	_dbound.tex \
+	_hypot.tex \
+	_divcomplex.tex \
+	_sparse.tex \
+	_allocate_sparse.tex \
+	_free_sparse.tex \
+	_reallocate_sparse.tex \
+	_nnz.tex \
+	_speye.tex \
+	_spzeros.tex \
+	_transpose.tex \
+	_transpose_unsym.tex \
+	_transpose_sym.tex \
+	_ptranspose.tex \
+	_sort.tex \
+	_band.tex \
+	_band_inplace.tex \
+	_aat.tex \
+	_copy_sparse.tex \
+	_copy.tex \
+	_add.tex \
+	_sparse_xtype.tex \
+	_factor.tex \
+	_allocate_factor.tex \
+	_free_factor.tex \
+	_reallocate_factor.tex \
+	_change_factor.tex \
+	_pack_factor.tex \
+	_reallocate_column.tex \
+	_factor_to_sparse.tex \
+	_copy_factor.tex \
+	_factor_xtype.tex \
+	_dense.tex \
+	_allocate_dense.tex \
+	_ensure_dense.tex \
+	_zeros.tex \
+	_ones.tex \
+	_eye.tex \
+	_free_dense.tex \
+	_sparse_to_dense.tex \
+	_dense_to_sparse.tex \
+	_copy_dense.tex \
+	_copy_dense2.tex \
+	_dense_xtype.tex \
+	_triplet.tex \
+	_allocate_triplet.tex \
+	_free_triplet.tex \
+	_reallocate_triplet.tex \
+	_sparse_to_triplet.tex \
+	_triplet_to_sparse.tex \
+	_copy_triplet.tex \
+	_triplet_xtype.tex \
+	_malloc.tex \
+	_calloc.tex \
+	_free.tex \
+	_realloc.tex \
+	_realloc_multiple.tex \
+	_version.tex \
+	_defn.tex
+
+_common.tex: PATTERN = '/typedef struct cholmod_common/, /^}/'
+_start.tex: PATTERN = '/int cholmod_start/, /\*\) ;/'
+_finish.tex: PATTERN = '/int cholmod_finish/, /\*\) ;/'
+_defaults.tex: PATTERN = '/int cholmod_defaults/, /\*\) ;/'
+_maxrank.tex: PATTERN = '/size_t cholmod_maxrank/, /\*\) ;/'
+_allocate_work.tex: PATTERN = '/int cholmod_allocate_work/, /\*\) ;/'
+_free_work.tex: PATTERN = '/int cholmod_free_work/, /\*\) ;/'
+_clear_flag.tex: PATTERN = '/long cholmod_clear_flag/, /\*\) ;/'
+_error.tex: PATTERN = '/int cholmod_error/, /\*\) ;/'
+_dbound.tex: PATTERN = '/double cholmod_dbound/, /\*\) ;/'
+_hypot.tex: PATTERN = '/double cholmod_hypot/, /double\) ;/'
+_divcomplex.tex: PATTERN = '/int cholmod_divcomplex/, /\*\) ;/'
+_sparse.tex: PATTERN = '/typedef struct cholmod_sparse/, /^}/'
+_allocate_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_allocate_sparse/, /\*\) ;/'
+_free_sparse.tex: PATTERN = '/int cholmod_free_sparse/, /\*\) ;/'
+_reallocate_sparse.tex: PATTERN = '/int cholmod_reallocate_sparse/, /\*\) ;/'
+_nnz.tex: PATTERN = '/long cholmod_nnz/, /\*\) ;/'
+_speye.tex: PATTERN = '/cholmod_sparse \*cholmod_speye/, /\*\) ;/'
+_spzeros.tex: PATTERN = '/cholmod_sparse \*cholmod_spzeros/, /\*\) ;/'
+_transpose.tex: PATTERN = '/cholmod_sparse \*cholmod_transpose/, /\*\) ;/'
+_transpose_unsym.tex: PATTERN = '/int cholmod_transpose_unsym/, /\*\) ;/'
+_transpose_sym.tex: PATTERN = '/int cholmod_transpose_sym/, /\*\) ;/'
+_ptranspose.tex: PATTERN = '/cholmod_sparse \*cholmod_ptranspose/, /\*\) ;/'
+_sort.tex: PATTERN = '/int cholmod_sort/, /\*\) ;/'
+_band.tex: PATTERN = '/cholmod_sparse \*cholmod_band/, /\*\) ;/'
+_band_inplace.tex: PATTERN = '/int cholmod_band_inplace/, /\*\) ;/'
+_aat.tex: PATTERN = '/cholmod_sparse \*cholmod_aat/, /\*\) ;/'
+_copy_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_copy_sparse/, /\*\) ;/'
+_copy.tex: PATTERN = '/cholmod_sparse \*cholmod_copy /, /\*\) ;/'
+_add.tex: PATTERN = '/cholmod_sparse \*cholmod_add/, /\*\) ;/'
+_sparse_xtype.tex: PATTERN = '/int cholmod_sparse_xtype/, /\*\) ;/'
+_factor.tex: PATTERN = '/typedef struct cholmod_factor/, /^}/'
+_allocate_factor.tex: PATTERN = '/cholmod_factor \*cholmod_allocate_factor/, /\*\) ;/'
+_free_factor.tex: PATTERN = '/int cholmod_free_factor/, /\*\) ;/'
+_reallocate_factor.tex: PATTERN = '/int cholmod_reallocate_factor/, /\*\) ;/'
+_change_factor.tex: PATTERN = '/int cholmod_change_factor/, /\*\) ;/'
+_pack_factor.tex: PATTERN = '/int cholmod_pack_factor/, /\*\) ;/'
+_reallocate_column.tex: PATTERN = '/int cholmod_reallocate_column/, /\*\) ;/'
+_factor_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_factor_to_sparse/, /\*\) ;/'
+_copy_factor.tex: PATTERN = '/cholmod_factor \*cholmod_copy_factor/, /\*\) ;/'
+_factor_xtype.tex: PATTERN = '/int cholmod_factor_xtype/, /\*\) ;/'
+_dense.tex: PATTERN = '/typedef struct cholmod_dense/, /^}/'
+_allocate_dense.tex: PATTERN = '/cholmod_dense \*cholmod_allocate_dense/, /\*\) ;/'
+_ensure_dense.tex: PATTERN = '/cholmod_dense \*cholmod_ensure_dense/, /\*\) ;/'
+_zeros.tex: PATTERN = '/cholmod_dense \*cholmod_zeros/, /\*\) ;/'
+_ones.tex: PATTERN = '/cholmod_dense \*cholmod_ones/, /\*\) ;/'
+_eye.tex: PATTERN = '/cholmod_dense \*cholmod_eye/, /\*\) ;/'
+_free_dense.tex: PATTERN = '/int cholmod_free_dense/, /\*\) ;/'
+_sparse_to_dense.tex: PATTERN = '/cholmod_dense \*cholmod_sparse_to_dense/, /\*\) ;/'
+_dense_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_dense_to_sparse/, /\*\) ;/'
+_copy_dense.tex: PATTERN = '/cholmod_dense \*cholmod_copy_dense/, /\*\) ;/'
+_copy_dense2.tex: PATTERN = '/int cholmod_copy_dense2/, /\*\) ;/'
+_dense_xtype.tex: PATTERN = '/int cholmod_dense_xtype/, /\*\) ;/'
+_triplet.tex: PATTERN = '/typedef struct cholmod_triplet/, /^}/'
+_allocate_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_allocate_triplet/, /\*\) ;/'
+_free_triplet.tex: PATTERN = '/int cholmod_free_triplet/, /\*\) ;/'
+_reallocate_triplet.tex: PATTERN = '/int cholmod_reallocate_triplet/, /\*\) ;/'
+_sparse_to_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_sparse_to_triplet/, /\*\) ;/'
+_triplet_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_triplet_to_sparse/, /\*\) ;/'
+_copy_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_copy_triplet/, /\*\) ;/'
+_triplet_xtype.tex: PATTERN = '/int cholmod_triplet_xtype/, /\*\) ;/'
+_malloc.tex: PATTERN = '/void \*cholmod_malloc/, /\*\) ;/'
+_calloc.tex: PATTERN = '/void \*cholmod_calloc/, /\*\) ;/'
+_free.tex: PATTERN = '/void \*cholmod_free/, /\*\) ;/'
+_realloc.tex: PATTERN = '/void \*cholmod_realloc/, /\*\) ;/'
+_realloc_multiple.tex: PATTERN = '/int cholmod_realloc_multiple/, /\*\) ;/'
+_version.tex: PATTERN = '/int cholmod_version/, /l_version/'
+_defn.tex: PATTERN = '/itype defines the/, /define CHOLMOD_SUPERNODAL/'
+
+$(PROTO_CORE): $(top_srcdir)/Include/cholmod_core.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CHECK = \
+	_check_common.tex \
+	_print_common.tex \
+	_check_sparse.tex \
+	_print_sparse.tex \
+	_check_dense.tex \
+	_print_dense.tex \
+	_check_factor.tex \
+	_print_factor.tex \
+	_check_triplet.tex \
+	_print_triplet.tex \
+	_check_subset.tex \
+	_print_subset.tex \
+	_check_perm.tex \
+	_print_perm.tex \
+	_check_parent.tex \
+	_print_parent.tex \
+	_read_triplet.tex \
+	_read_sparse.tex \
+	_read_dense.tex \
+	_read_matrix.tex \
+	_write_sparse.tex \
+	_write_dense.tex
+
+_check_common.tex: PATTERN = '/int cholmod_check_common/, /\*\) ;/'
+_print_common.tex: PATTERN = '/int cholmod_print_common/, /\*\) ;/'
+_check_sparse.tex: PATTERN = '/int cholmod_check_sparse/, /\*\) ;/'
+_print_sparse.tex: PATTERN = '/int cholmod_print_sparse/, /\*\) ;/'
+_check_dense.tex: PATTERN = '/int cholmod_check_dense/, /\*\) ;/'
+_print_dense.tex: PATTERN = '/int cholmod_print_dense/, /\*\) ;/'
+_check_factor.tex: PATTERN = '/int cholmod_check_factor/, /\*\) ;/'
+_print_factor.tex: PATTERN = '/int cholmod_print_factor/, /\*\) ;/'
+_check_triplet.tex: PATTERN = '/int cholmod_check_triplet/, /\*\) ;/'
+_print_triplet.tex: PATTERN = '/int cholmod_print_triplet/, /\*\) ;/'
+_check_subset.tex: PATTERN = '/int cholmod_check_subset/, /\*\) ;/'
+_print_subset.tex: PATTERN = '/int cholmod_print_subset/, /\*\) ;/'
+_check_perm.tex: PATTERN = '/int cholmod_check_perm/, /\*\) ;/'
+_print_perm.tex: PATTERN = '/int cholmod_print_perm/, /\*\) ;/'
+_check_parent.tex: PATTERN = '/int cholmod_check_parent/, /\*\) ;/'
+_print_parent.tex: PATTERN = '/int cholmod_print_parent/, /\*\) ;/'
+_read_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_read_triplet/, /\*\) ;/'
+_read_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_read_sparse/, /\*\) ;/'
+_read_dense.tex: PATTERN = '/cholmod_dense \*cholmod_read_dense/, /\*\) ;/'
+_read_matrix.tex: PATTERN = '/void \*cholmod_read_matrix/, /\*\) ;/'
+_write_sparse.tex: PATTERN = '/int cholmod_write_sparse/, /\*\) ;/'
+_write_dense.tex: PATTERN = '/int cholmod_write_dense/, /\*\) ;/'
+
+$(PROTO_CHECK): $(top_srcdir)/Include/cholmod_check.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CHOLESKY = \
+	_analyze.tex \
+	_analyze_p.tex \
+	_factorize.tex \
+	_factorize_p.tex \
+	_solve.tex \
+	_solve2.tex \
+	_spsolve.tex \
+	_etree.tex \
+	_rowcolcounts.tex \
+	_analyze_ordering.tex \
+	_amd.tex \
+	_colamd.tex \
+	_rowfac.tex \
+	_rowfac_mask.tex \
+	_row_subtree.tex \
+	_row_lsubtree.tex \
+	_lsolve_pattern.tex \
+	_resymbol.tex \
+	_resymbol_noperm.tex \
+	_rcond.tex \
+	_postorder.tex
+
+_analyze.tex: PATTERN = '/cholmod_factor \*cholmod_analyze /, /\*\) ;/'
+_analyze_p.tex: PATTERN = '/cholmod_factor \*cholmod_analyze_p/, /\*\) ;/'
+_factorize.tex: PATTERN = '/int cholmod_factorize /, /\*\) ;/'
+_factorize_p.tex: PATTERN = '/int cholmod_factorize_p/, /\*\) ;/'
+_solve.tex: PATTERN = '/cholmod_dense \*cholmod_solve/, /\*\) ;/'
+_solve2.tex: PATTERN = '/int cholmod_solve2/, /\*\) ;/'
+_spsolve.tex: PATTERN = '/cholmod_sparse \*cholmod_spsolve/, /\*\) ;/'
+_etree.tex: PATTERN = '/int cholmod_etree/, /\*\) ;/'
+_rowcolcounts.tex: PATTERN = '/int cholmod_rowcolcounts/, /\*\) ;/'
+_analyze_ordering.tex: PATTERN = '/int cholmod_analyze_ordering/, /\*\) ;/'
+_amd.tex: PATTERN = '/int cholmod_amd/, /\*\) ;/'
+_colamd.tex: PATTERN = '/int cholmod_colamd/, /\*\) ;/'
+_rowfac.tex: PATTERN = '/int cholmod_rowfac/, /\*\) ;/'
+_rowfac_mask.tex: PATTERN = '/int cholmod_rowfac_mask/, /\*\) ;/'
+_row_subtree.tex: PATTERN = '/int cholmod_row_subtree/, /\*\) ;/'
+_row_lsubtree.tex: PATTERN = '/int cholmod_row_lsubtree/, /\*\) ;/'
+_lsolve_pattern.tex: PATTERN = '/int cholmod_lsolve_pattern/, /\*\) ;/'
+_resymbol.tex: PATTERN = '/int cholmod_resymbol /, /\*\) ;/'
+_resymbol_noperm.tex: PATTERN = '/int cholmod_resymbol_noperm/, /\*\) ;/'
+_rcond.tex: PATTERN = '/double cholmod_rcond/, /\*\) ;/'
+_postorder.tex: PATTERN = '/long cholmod_postorder/, /\*\) ;/'
+
+$(PROTO_CHOLESKY): $(top_srcdir)/Include/cholmod_cholesky.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_MODIFY = \
+	_updown.tex \
+	_updown_solve.tex \
+	_updown_mark.tex \
+	_updown_mask.tex \
+	_rowadd.tex \
+	_rowadd_solve.tex \
+	_rowadd_mark.tex \
+	_rowdel.tex \
+	_rowdel_solve.tex \
+	_rowdel_mark.tex
+
+_updown.tex: PATTERN = '/int cholmod_updown /, /\*\) ;/'
+_updown_solve.tex: PATTERN = '/int cholmod_updown_solve/, /\*\) ;/'
+_updown_mark.tex: PATTERN = '/int cholmod_updown_mark/, /\*\) ;/'
+_updown_mask.tex: PATTERN = '/int cholmod_updown_mask/, /\*\) ;/'
+_rowadd.tex: PATTERN = '/int cholmod_rowadd /, /\*\) ;/'
+_rowadd_solve.tex: PATTERN = '/int cholmod_rowadd_solve/, /\*\) ;/'
+_rowadd_mark.tex: PATTERN = '/int cholmod_rowadd_mark/, /\*\) ;/'
+_rowdel.tex: PATTERN = '/int cholmod_rowdel /, /\*\) ;/'
+_rowdel_solve.tex: PATTERN = '/int cholmod_rowdel_solve/, /\*\) ;/'
+_rowdel_mark.tex: PATTERN = '/int cholmod_rowdel_mark/, /\*\) ;/'
+
+$(PROTO_MODIFY): $(top_srcdir)/Include/cholmod_modify.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_MATRIXOPS = \
+	_drop.tex \
+	_norm_dense.tex \
+	_norm_sparse.tex \
+	_horzcat.tex \
+	_scale.tex \
+	_sdmult.tex \
+	_ssmult.tex \
+	_submatrix.tex \
+	_vertcat.tex \
+	_symmetry.tex
+
+_drop.tex: PATTERN = '/int cholmod_drop/, /\*\) ;/'
+_norm_dense.tex: PATTERN = '/double cholmod_norm_dense/, /\*\) ;/'
+_norm_sparse.tex: PATTERN = '/double cholmod_norm_sparse/, /\*\) ;/'
+_horzcat.tex: PATTERN = '/cholmod_sparse \*cholmod_horzcat/, /\*\) ;/'
+_scale.tex: PATTERN = '/define CHOLMOD_SCALAR/, /\*\) ;/'
+_sdmult.tex: PATTERN = '/int cholmod_sdmult/, /\*\) ;/'
+_ssmult.tex: PATTERN = '/cholmod_sparse \*cholmod_ssmult/, /\*\) ;/'
+_submatrix.tex: PATTERN = '/cholmod_sparse \*cholmod_submatrix/, /\*\) ;/'
+_vertcat.tex: PATTERN = '/cholmod_sparse \*cholmod_vertcat/, /\*\) ;/'
+_symmetry.tex: PATTERN = '/int cholmod_symmetry/, /\*\) ;/'
+
+$(PROTO_MATRIXOPS): $(top_srcdir)/Include/cholmod_matrixops.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_SUPERNODAL = \
+	_super_symbolic.tex \
+	_super_numeric.tex \
+	_super_lsolve.tex \
+	_super_ltsolve.tex
+
+_super_symbolic.tex: PATTERN = '/int cholmod_super_symbolic/, /\*\) ;/'
+_super_numeric.tex: PATTERN = '/int cholmod_super_numeric/, /\*\) ;/'
+_super_lsolve.tex: PATTERN = '/int cholmod_super_lsolve/, /\*\) ;/'
+_super_ltsolve.tex: PATTERN = '/int cholmod_super_ltsolve/, /\*\) ;/'
+
+$(PROTO_SUPERNODAL): $(top_srcdir)/Include/cholmod_supernodal.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_PARTITION = \
+	_nested_dissection.tex \
+	_metis.tex \
+	_ccolamd.tex \
+	_camd.tex \
+	_csymamd.tex \
+	_bisect.tex \
+	_metis_bisector.tex \
+	_collapse_septree.tex
+
+_nested_dissection.tex: PATTERN = '/long cholmod_nested_dissection/, /\*\) ;/'
+_metis.tex: PATTERN = '/int cholmod_metis/, /\*\) ;/'
+_ccolamd.tex: PATTERN = '/int cholmod_ccolamd/, /\*\) ;/'
+_camd.tex: PATTERN = '/int cholmod_camd/, /\*\) ;/'
+_csymamd.tex: PATTERN = '/int cholmod_csymamd/, /\*\) ;/'
+_bisect.tex: PATTERN = '/long cholmod_bisect/, /\*\) ;/'
+_metis_bisector.tex: PATTERN = '/long cholmod_metis_bisector/, /\*\) ;/'
+_collapse_septree.tex: PATTERN = '/long cholmod_collapse_septree/, /\*\) ;/'
+
+$(PROTO_PARTITION): $(top_srcdir)/Include/cholmod_partition.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO = \
+	$(PROTO_M) \
+	$(PROTO_SIMPLE) \
+	$(PROTO_CORE) \
+	$(PROTO_CHECK) \
+	$(PROTO_CHOLESKY) \
+	$(PROTO_MODIFY) \
+	$(PROTO_MATRIXOPS) \
+	$(PROTO_SUPERNODAL) \
+	$(PROTO_PARTITION)
+
+CHOLMOD_UserGuide.pdf CHOLMOD_UserGuide.aux: $(PROTO)
+.INTERMEDIATE: CHOLMOD_UserGuide.aux $(PROTO)
+
+.INTERMEDIATE: CHOLMOD_UserGuide.bib
+CHOLMOD_UserGuide.bib: UserGuide.bib
+	$(LN_S) -f $< $@
+
+TEX = TEXINPUTS="$(srcdir):" pdflatex -interaction nonstopmode -file-line-error
+BIB = BIBINPUTS="$(srcdir):" bibtex
+%.pdf: %.tex %.bbl
+	$(TEX) $*
+	while grep -q "Rerun to get cross-references right" $*.log; do \
+		$(TEX) $*; \
+	done
+%.bbl: %.aux %.bib
+	$(BIB) $*
+%.aux: %.tex
+	$(TEX) $*
+
+CLEANFILES = _*.awk _*.tex *.dvi *.aux *.log *.lof *.lot *.toc *.bak *.bbl *.blg
+MAINTAINERCLEANFILES = $(dist_pdf_DATA)
diff --git a/GPU/Makefile.am b/GPU/Makefile.am
new file mode 100644
--- /dev/null
+++ b/GPU/Makefile.am
@@ -0,0 +1,30 @@
+AM_CFLAGS = $(OPENMP_CFLAGS)
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+GPUSRC = \
+	cholmod_gpu.c
+
+EXTRA_DIST = \
+	cholmod_gpu_kernels.c \
+	cholmod_gpu_kernels.cu
+
+noinst_HEADERS = \
+	t_cholmod_gpu.c
+
+noinst_LTLIBRARIES = \
+	libgpui.la \
+	libgpul.la \
+	libgpu.la
+
+libgpui_la_SOURCES = $(GPUSRC)
+libgpui_la_LIBADD = $(CODE_COVERAGE_LIBS)
+libgpui_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libgpui_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libgpul_la_SOURCES = $(GPUSRC)
+libgpul_la_LIBADD = $(CODE_COVERAGE_LIBS)
+libgpul_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libgpul_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libgpu_la_SOURCES =
+libgpu_la_LIBADD = libgpui.la libgpul.la
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1,47 @@
+EXTRA_DIST = \
+	README.txt
+
+# Automatically generated headers
+nodist_pkginclude_HEADERS = \
+	cholmod_config.h
+
+pkginclude_HEADERS = \
+	cholmod.h \
+	cholmod_blas.h \
+	cholmod_core.h \
+	cholmod_function.h \
+	cholmod_gpu.h \
+	cholmod_io64.h
+
+noinst_HEADERS = \
+	cholmod_complexity.h \
+	cholmod_gpu_kernels.h \
+	cholmod_internal.h \
+	cholmod_template.h
+
+if MOD_CHECK
+pkginclude_HEADERS += cholmod_check.h
+endif
+
+if MOD_CHOLESKY
+pkginclude_HEADERS += cholmod_cholesky.h
+endif
+
+if MOD_PARTITION
+pkginclude_HEADERS += cholmod_camd.h
+if MOD_PARTITION_METIS
+pkginclude_HEADERS += cholmod_partition.h
+endif
+endif
+
+if MOD_MATRIXOPS
+pkginclude_HEADERS += cholmod_matrixops.h
+endif
+
+if MOD_MODIFY
+pkginclude_HEADERS += cholmod_modify.h
+endif
+
+if MOD_SUPERNODAL
+pkginclude_HEADERS += cholmod_supernodal.h
+endif
diff --git a/Include/cholmod_config.h b/Include/cholmod_config.h.in
rename from Include/cholmod_config.h
rename to Include/cholmod_config.h.in
--- a/Include/cholmod_config.h
+++ b/Include/cholmod_config.h.in
@@ -45,16 +45,28 @@
 /* Use the compiler flag, or uncomment the definition(s), if you want to use
  * one or more non-default installation options: */
 
-/*
-#define NCHECK
-#define NCHOLESKY
-#define NCAMD
-#define NPARTITION
+/* Define to disable the Check module */
+#undef NCHECK
 
-#define NMATRIXOPS
-#define NMODIFY
-#define NSUPERNODAL
+/* Define to disable the Cholesky module */
+#undef NCHOLESKY
+
+/* Define to disable the Partition module */
+#undef NCAMD
+
+/* Define to disable METIS support in the Partition module */
+#undef NPARTITION
 
+/* Define to disable the MatrixOps module */
+#undef NMATRIXOPS
+
+/* Define to disable the Modify module */
+#undef NMODIFY
+
+/* Define to disable the Supernodal module */
+#undef NSUPERNODAL
+
+/*
 #define NPRINT
 
 #define LONGBLAS long
@@ -62,6 +74,9 @@
 #define NSUNPERF
 */
 
+/* Define to disable GPL-licensed modules */
+#undef NGPL
+
 /* The option disables the MatrixOps, Modify, and Supernodal modules.  The
     existence of this #define here, and its use in these 3 modules, does not
     affect the license itself; see CHOLMOD/Doc/License.txt for your actual
diff --git a/MATLAB/Makefile.am b/MATLAB/Makefile.am
new file mode 100644
--- /dev/null
+++ b/MATLAB/Makefile.am
@@ -0,0 +1,26 @@
+# Needed by Doc/Makefile.am
+EXTRA_DIST = \
+	analyze.m \
+	bisect.m \
+	chol2.m \
+	cholmod2.m \
+	cholmod_demo.m \
+	cholmod_make.m \
+	etree2.m \
+	graph_demo.m \
+	lchol.m \
+	ldl_normest.m \
+	ldlchol.m \
+	ldlsolve.m \
+	ldlsplit.m \
+	ldlupdate.m \
+	ldlrowmod.m \
+	metis.m \
+	mread.m \
+	mwrite.m \
+	nesdis.m \
+	resymbol.m \
+	sdmult.m \
+	sparse2.m \
+	spsym.m \
+	symbfact2.m
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,52 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = Include Core
+EXTRA_DIST = README.txt
+
+pkgconfig_DATA = cholmod.pc
+
+lib_LTLIBRARIES = libcholmod.la
+
+libcholmod_la_SOURCES =
+libcholmod_la_LIBADD = $(top_builddir)/Core/libcore.la
+libcholmod_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
+
+if MOD_CHECK
+SUBDIRS += Check
+libcholmod_la_LIBADD += $(top_builddir)/Check/libcheck.la
+endif
+
+if MOD_CHOLESKY
+SUBDIRS += Cholesky
+libcholmod_la_LIBADD += $(top_builddir)/Cholesky/libcholesky.la
+endif
+
+if MOD_PARTITION
+SUBDIRS += Partition
+libcholmod_la_LIBADD += $(top_builddir)/Partition/libpartition.la
+endif
+
+if MOD_MATRIXOPS
+SUBDIRS += MatrixOps
+libcholmod_la_LIBADD += $(top_builddir)/MatrixOps/libmatrixops.la
+endif
+
+if MOD_MODIFY
+SUBDIRS += Modify
+libcholmod_la_LIBADD += $(top_builddir)/Modify/libmodify.la
+endif
+
+if MOD_SUPERNODAL
+SUBDIRS += Supernodal
+libcholmod_la_LIBADD += $(top_builddir)/Supernodal/libsupernodal.la
+endif
+
+if MOD_GPU
+SUBDIRS += GPU
+libcholmod_la_LIBADD += $(top_builddir)/GPU/libgpu.la
+endif
+
+SUBDIRS += . MATLAB Demo Tcov Doc
+
+CODE_COVERAGE_BRANCH_COVERAGE = 1
+@CODE_COVERAGE_RULES@
diff --git a/MatrixOps/Makefile.am b/MatrixOps/Makefile.am
new file mode 100644
--- /dev/null
+++ b/MatrixOps/Makefile.am
@@ -0,0 +1,36 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	gpl.txt
+
+MATRIXOPSSRC = \
+	cholmod_drop.c \
+	cholmod_horzcat.c \
+	cholmod_norm.c \
+	cholmod_scale.c \
+	cholmod_sdmult.c \
+	cholmod_ssmult.c \
+	cholmod_submatrix.c \
+	cholmod_symmetry.c \
+	cholmod_vertcat.c
+
+noinst_HEADERS = \
+	t_cholmod_sdmult.c
+
+noinst_LTLIBRARIES = \
+	libmatrixopsi.la \
+	libmatrixopsl.la \
+	libmatrixops.la
+
+libmatrixopsi_la_SOURCES = $(MATRIXOPSSRC)
+libmatrixopsi_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libmatrixopsi_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libmatrixopsi_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libmatrixopsl_la_SOURCES = $(MATRIXOPSSRC)
+libmatrixopsl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libmatrixopsl_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libmatrixopsl_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libmatrixops_la_SOURCES =
+libmatrixops_la_LIBADD = libmatrixopsi.la libmatrixopsl.la
diff --git a/Modify/Makefile.am b/Modify/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Modify/Makefile.am
@@ -0,0 +1,31 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	gpl.txt
+
+MODIFYSRC = \
+	cholmod_rowadd.c \
+	cholmod_rowdel.c \
+	cholmod_updown.c
+
+noinst_HEADERS = \
+	t_cholmod_updown.c \
+	t_cholmod_updown_numkr.c
+
+noinst_LTLIBRARIES = \
+	libmodifyi.la \
+	libmodifyl.la \
+	libmodify.la
+
+libmodifyi_la_SOURCES = $(MODIFYSRC)
+libmodifyi_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libmodifyi_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libmodifyi_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libmodifyl_la_SOURCES = $(MODIFYSRC)
+libmodifyl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libmodifyl_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libmodifyl_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libmodify_la_SOURCES =
+libmodify_la_LIBADD = libmodifyi.la libmodifyl.la
diff --git a/Partition/Makefile.am b/Partition/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Partition/Makefile.am
@@ -0,0 +1,35 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(METIS_CFLAGS) $(CCOLAMD_CFLAGS) $(CAMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	lesser.txt
+
+PARTITIONSRC = \
+	cholmod_camd.c \
+	cholmod_ccolamd.c \
+	cholmod_csymamd.c
+METISSRC = \
+	cholmod_metis.c \
+	cholmod_nesdis.c
+
+noinst_LTLIBRARIES = \
+	libpartitioni.la \
+	libpartitionl.la \
+	libpartition.la
+
+libpartitioni_la_SOURCES = $(PARTITIONSRC)
+libpartitioni_la_LIBADD = $(METIS_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libpartitioni_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libpartitioni_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libpartitionl_la_SOURCES = $(PARTITIONSRC)
+libpartitionl_la_LIBADD = $(METIS_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libpartitionl_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libpartitionl_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+if MOD_PARTITION_METIS
+libpartitioni_la_SOURCES += $(METISSRC)
+libpartitionl_la_SOURCES += $(METISSRC)
+endif
+
+libpartition_la_SOURCES =
+libpartition_la_LIBADD = libpartitioni.la libpartitionl.la
diff --git a/Supernodal/Makefile.am b/Supernodal/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Supernodal/Makefile.am
@@ -0,0 +1,37 @@
+AM_CFLAGS = $(OPENMP_CFLAGS)
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	gpl.txt
+
+SUPERNODALSRC = \
+	cholmod_super_numeric.c \
+	cholmod_super_solve.c \
+	cholmod_super_symbolic.c
+
+noinst_HEADERS = \
+	t_cholmod_super_numeric.c \
+	t_cholmod_super_solve.c
+
+noinst_LTLIBRARIES = \
+	libsupernodali.la \
+	libsupernodall.la \
+	libsupernodal.la
+
+libsupernodali_la_SOURCES = $(SUPERNODALSRC)
+libsupernodali_la_LIBADD = $(LAPACK_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS) $(CODE_COVERAGE_LIBS)
+libsupernodali_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+libsupernodali_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+libsupernodall_la_SOURCES = $(SUPERNODALSRC)
+libsupernodall_la_LIBADD = $(LAPACK_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS) $(CODE_COVERAGE_LIBS)
+libsupernodall_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS) -DDLONG
+libsupernodall_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+if !TIMING
+libsupernodali_la_CPPFLAGS += -DNTIMER
+libsupernodall_la_CPPFLAGS += -DNTIMER
+endif
+
+libsupernodal_la_SOURCES =
+libsupernodal_la_LIBADD = libsupernodali.la libsupernodall.la
diff --git a/Tcov/Makefile.am b/Tcov/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Tcov/Makefile.am
@@ -0,0 +1,330 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	README.txt \
+	gpl.txt
+
+dist_noinst_DATA = \
+	comments.txt \
+	Matrix/0 \
+	Matrix/0_1 \
+	Matrix/1_0 \
+	Matrix/1e99 \
+	Matrix/2.tri \
+	Matrix/20lo \
+	Matrix/2diag.tri \
+	Matrix/2lo.tri \
+	Matrix/2up.tri \
+	Matrix/3_2 \
+	Matrix/3b \
+	Matrix/3by0.mtx \
+	Matrix/3singular \
+	Matrix/5by50 \
+	Matrix/C9840 \
+	Matrix/afiro \
+	Matrix/c10 \
+	Matrix/c30lo \
+	Matrix/c30up \
+	Matrix/c3singular \
+	Matrix/c5lo \
+	Matrix/c5up2 \
+	Matrix/cha.mtx \
+	Matrix/cpi \
+	Matrix/crud1 \
+	Matrix/crud2 \
+	Matrix/cs.mtx \
+	Matrix/csa.mtx \
+	Matrix/cza \
+	Matrix/cza.mtx \
+	Matrix/diag \
+	Matrix/ex5lo \
+	Matrix/fullcha.mtx \
+	Matrix/fullcrud.mtx \
+	Matrix/fullcrud1.mtx \
+	Matrix/fullcrud2.mtx \
+	Matrix/fullcsa.mtx \
+	Matrix/fullcza.mtx \
+	Matrix/fullrsa.mtx \
+	Matrix/fullrza.mtx \
+	Matrix/galenet \
+	Matrix/huge.tri \
+	Matrix/ibm32 \
+	Matrix/k01up \
+	Matrix/one \
+	Matrix/pi \
+	Matrix/plskz362.mtx \
+	Matrix/r5lo \
+	Matrix/r5lo2 \
+	Matrix/r5up \
+	Matrix/r5up2 \
+	Matrix/rza.mtx \
+	Matrix/z10 \
+	Matrix/z30lo \
+	Matrix/z30up \
+	Matrix/z3singular \
+	Matrix/z5lo \
+	Matrix/z5up \
+	Matrix/z5up2 \
+	Matrix/zero
+
+TEST = \
+	amdtest.c \
+	aug.c \
+	camdtest.c \
+	cctest.c \
+	cm.c \
+	cm.h \
+	ctest.c \
+	huge.c \
+	lpdemo.c \
+	memory.c \
+	null.c \
+	null2.c \
+	raw_factor.c \
+	solve.c \
+	test_ops.c \
+	unpack.c
+
+if MOD_CHECK
+if MOD_CHOLESKY
+if MOD_PARTITION
+if MOD_MATRIXOPS
+if MOD_MODIFY
+if MOD_SUPERNODAL
+if CODE_COVERAGE_ENABLED
+
+check_PROGRAMS = \
+	cm \
+	cl \
+	cmread \
+	clread
+
+cm_SOURCES = $(TEST)
+cm_LDADD = $(top_builddir)/libcholmod.la $(COLAMD_LIBS) $(AMD_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS)
+cm_CPPFLAGS = $(AM_CPPFLAGS) $(COLAMD_CFLAGS) $(AMD_CFLAGS) $(CCOLAMD_CFLAGS) $(CAMD_CFLAGS)
+
+cl_SOURCES = $(TEST)
+cl_LDADD = $(top_builddir)/libcholmod.la $(COLAMD_LIBS) $(AMD_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS)
+cl_CPPFLAGS = $(AM_CPPFLAGS) $(COLAMD_CFLAGS) $(AMD_CFLAGS) $(CCOLAMD_CFLAGS) $(CAMD_CFLAGS) -DDLONG
+
+cmread_SOURCES = cmread.c
+cmread_LDADD = $(top_builddir)/libcholmod.la
+
+clread_SOURCES = cmread.c
+clread_LDADD = $(top_builddir)/libcholmod.la
+clread_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+MATRICES = \
+	$(srcdir)/Matrix/0 \
+	$(srcdir)/Matrix/0_1 \
+	$(srcdir)/Matrix/1_0 \
+	$(srcdir)/Matrix/1e99 \
+	$(srcdir)/Matrix/2.tri \
+	$(srcdir)/Matrix/20lo \
+	$(srcdir)/Matrix/2diag.tri \
+	$(srcdir)/Matrix/2lo.tri \
+	$(srcdir)/Matrix/2up.tri \
+	$(srcdir)/Matrix/3b \
+	$(srcdir)/Matrix/3by0.mtx \
+	$(srcdir)/Matrix/3singular \
+	$(srcdir)/Matrix/5by50 \
+	$(srcdir)/Matrix/C9840 \
+	$(srcdir)/Matrix/afiro \
+	$(srcdir)/Matrix/c10 \
+	$(srcdir)/Matrix/c30lo \
+	$(srcdir)/Matrix/c30up \
+	$(srcdir)/Matrix/c3singular \
+	$(srcdir)/Matrix/c5lo \
+	$(srcdir)/Matrix/c5up2 \
+	$(srcdir)/Matrix/cha.mtx \
+	$(srcdir)/Matrix/cpi \
+	$(srcdir)/Matrix/crud1 \
+	$(srcdir)/Matrix/crud2 \
+	$(srcdir)/Matrix/cs.mtx \
+	$(srcdir)/Matrix/csa.mtx \
+	$(srcdir)/Matrix/cza \
+	$(srcdir)/Matrix/cza.mtx \
+	$(srcdir)/Matrix/diag \
+	$(srcdir)/Matrix/ex5lo \
+	$(srcdir)/Matrix/fullcha.mtx \
+	$(srcdir)/Matrix/fullcrud.mtx \
+	$(srcdir)/Matrix/fullcrud1.mtx \
+	$(srcdir)/Matrix/fullcrud2.mtx \
+	$(srcdir)/Matrix/fullcsa.mtx \
+	$(srcdir)/Matrix/fullcza.mtx \
+	$(srcdir)/Matrix/fullrsa.mtx \
+	$(srcdir)/Matrix/fullrza.mtx \
+	$(srcdir)/Matrix/galenet \
+	$(srcdir)/Matrix/huge.tri \
+	$(srcdir)/Matrix/ibm32 \
+	$(srcdir)/Matrix/k01up \
+	$(srcdir)/Matrix/one \
+	$(srcdir)/Matrix/pi \
+	$(srcdir)/Matrix/plskz362.mtx \
+	$(srcdir)/Matrix/r5lo \
+	$(srcdir)/Matrix/r5lo2 \
+	$(srcdir)/Matrix/r5up \
+	$(srcdir)/Matrix/r5up2 \
+	$(srcdir)/Matrix/rza.mtx \
+	$(srcdir)/Matrix/z10 \
+	$(srcdir)/Matrix/z30lo \
+	$(srcdir)/Matrix/z30up \
+	$(srcdir)/Matrix/z3singular \
+	$(srcdir)/Matrix/z5lo \
+	$(srcdir)/Matrix/z5up \
+	$(srcdir)/Matrix/z5up2 \
+	$(srcdir)/Matrix/zero \
+	$(top_srcdir)/Demo/Matrix/empty.tri \
+	$(top_srcdir)/Demo/Matrix/mangle5.tri \
+	$(top_srcdir)/Demo/Matrix/mangle6.tri \
+	$(top_srcdir)/Demo/Matrix/mangle7.tri \
+	$(top_srcdir)/Demo/Matrix/mangle8.tri \
+	$(top_srcdir)/Demo/Matrix/one.tri
+
+check-local: $(check_PROGRAMS) $(MATRICES)
+	./cmread no_such_file                          > no_such_file.out
+	./cmread $(srcdir)/Matrix/crud1                > crud1.out
+	./cmread $(srcdir)/Matrix/crud2                > crud2.out
+	./cmread $(srcdir)/Matrix/fullcrud.mtx         > fullcrud.out
+	./cmread $(srcdir)/Matrix/fullcrud1.mtx        > fullcrud1.out
+	./cmread $(srcdir)/Matrix/fullcrud2.mtx        > fullcrud2.out
+	./cmread $(srcdir)/Matrix/3by0.mtx             > 3by0.out
+	./cmread $(srcdir)/Matrix/fullrza.mtx          > fullrza.out
+	./cmread $(srcdir)/Matrix/fullrsa.mtx          > fullrsa.out
+	./cmread $(srcdir)/Matrix/fullcsa.mtx          > fullcsa.out
+	./cmread $(srcdir)/Matrix/fullcza.mtx          > fullcza.out
+	./cmread $(srcdir)/Matrix/fullcha.mtx          > fullcha.out
+	./cmread $(srcdir)/Matrix/cha.mtx              > cha.out
+	./cmread $(srcdir)/Matrix/cza.mtx              > cza.out
+	./cmread $(srcdir)/Matrix/csa.mtx              > csa.out
+	./cmread $(srcdir)/Matrix/one                  > one.out
+	./cmread $(srcdir)/Matrix/rza.mtx              > rza.out
+	./cmread $(top_srcdir)/Demo/Matrix/mangle5.tri > mangle5.out
+	./cmread $(top_srcdir)/Demo/Matrix/mangle6.tri > mangle6.out
+	./cmread $(top_srcdir)/Demo/Matrix/mangle7.tri > mangle6.out
+	./cmread $(top_srcdir)/Demo/Matrix/mangle8.tri > mangle8.out
+	./cmread $(top_srcdir)/Demo/Matrix/empty.tri   > empty.out
+	./cmread $(top_srcdir)/Demo/Matrix/one.tri     > one.out
+	./cmread $(srcdir)/Matrix/plskz362.mtx         > plskz363.out
+	./cmread $(srcdir)/Matrix/2diag.tri            > 2diag.out
+	./cmread $(srcdir)/Matrix/r5lo                 > r5lo.out
+	./cmread $(srcdir)/Matrix/r5lo2                > r5lo2.out
+	./cmread $(srcdir)/Matrix/cs.mtx               > cs.out
+	./cmread $(srcdir)/Matrix/2lo.tri              > 2lo.out
+	./cmread $(srcdir)/Matrix/2.tri                > 2.out
+	./cmread $(srcdir)/Matrix/2up.tri              > 2up.out
+	./cmread $(srcdir)/Matrix/huge.tri             > huge.out
+	./cmread $(srcdir)/Matrix/1e99                 > 1e99.out
+	./clread no_such_file                          > l_no_such_file.out
+	./clread $(srcdir)/Matrix/crud1                > l_crud1.out
+	./clread $(srcdir)/Matrix/crud2                > l_crud2.out
+	./clread $(srcdir)/Matrix/fullcrud.mtx         > l_fullcrud.out
+	./clread $(srcdir)/Matrix/fullcrud1.mtx        > l_fullcrud1.out
+	./clread $(srcdir)/Matrix/fullcrud2.mtx        > l_fullcrud2.out
+	./clread $(srcdir)/Matrix/3by0.mtx             > l_3by0.out
+	./clread $(srcdir)/Matrix/fullrza.mtx          > l_fullrza.out
+	./clread $(srcdir)/Matrix/fullrsa.mtx          > l_fullrsa.out
+	./clread $(srcdir)/Matrix/fullcsa.mtx          > l_fullcsa.out
+	./clread $(srcdir)/Matrix/fullcza.mtx          > l_fullcza.out
+	./clread $(srcdir)/Matrix/fullcha.mtx          > l_fullcha.out
+	./clread $(srcdir)/Matrix/cha.mtx              > l_cha.out
+	./clread $(srcdir)/Matrix/cza.mtx              > l_cza.out
+	./clread $(srcdir)/Matrix/csa.mtx              > l_csa.out
+	./clread $(srcdir)/Matrix/one                  > l_one.out
+	./clread $(srcdir)/Matrix/rza.mtx              > l_rza.out
+	./clread $(top_srcdir)/Demo/Matrix/mangle5.tri > l_mangle5.out
+	./clread $(top_srcdir)/Demo/Matrix/mangle6.tri > l_mangle6.out
+	./clread $(top_srcdir)/Demo/Matrix/mangle7.tri > l_mangle6.out
+	./clread $(top_srcdir)/Demo/Matrix/mangle8.tri > l_mangle8.out
+	./clread $(top_srcdir)/Demo/Matrix/empty.tri   > l_empty.out
+	./clread $(top_srcdir)/Demo/Matrix/one.tri     > l_one.out
+	./clread $(srcdir)/Matrix/plskz362.mtx         > l_plskz363.out
+	./clread $(srcdir)/Matrix/2diag.tri            > l_2diag.out
+	./clread $(srcdir)/Matrix/r5lo                 > l_r5lo.out
+	./clread $(srcdir)/Matrix/r5lo2                > l_r5lo2.out
+	./clread $(srcdir)/Matrix/cs.mtx               > l_cs.out
+	./clread $(srcdir)/Matrix/2lo.tri              > l_l_2lo.out
+	./clread $(srcdir)/Matrix/2.tri                > l_2.out
+	./clread $(srcdir)/Matrix/2up.tri              > l_2up.out
+	./clread $(srcdir)/Matrix/huge.tri             > l_huge.out
+	./clread $(srcdir)/Matrix/1e99                 > l_1e99.out
+	./cm    < $(srcdir)/Matrix/galenet             > galenet.out
+	./cl    < $(srcdir)/Matrix/galenet             > l_galenet.out
+	./cm    < $(srcdir)/Matrix/5by50               > 5by50.out
+	./cl    < $(srcdir)/Matrix/5by50               > l_5by50.out
+	./cm    < $(srcdir)/Matrix/r5lo                > r5lo.out
+	./cl    < $(srcdir)/Matrix/r5lo                > l_r5lo.out
+	./cm    < $(srcdir)/Matrix/r5up                > r5up.out
+	./cl    < $(srcdir)/Matrix/r5up                > l_r5up.out
+	./cm    < $(srcdir)/Matrix/r5up2               > r5up2.out
+	./cl    < $(srcdir)/Matrix/r5up2               > l_r5up2.out
+	./cm    < $(srcdir)/Matrix/c5up2               > c5up2.out
+	./cl    < $(srcdir)/Matrix/c5up2               > l_c5up2.out
+	./cm    < $(srcdir)/Matrix/z5up2               > z5up2.out
+	./cl    < $(srcdir)/Matrix/z5up2               > l_z5up2.out
+	./cm -m < $(srcdir)/Matrix/z5lo                > z5lo.out
+	./cl -m < $(srcdir)/Matrix/z5lo                > l_z5lo.out
+	./cm    < $(srcdir)/Matrix/ibm32               > ibm.out
+	./cl    < $(srcdir)/Matrix/ibm32               > l_ibm.out
+	./cm -m < $(srcdir)/Matrix/c5lo                > c5lo.out
+	./cl -m < $(srcdir)/Matrix/c5lo                > l_c5lo.out
+	./cm -m < $(srcdir)/Matrix/z10                 > z10.out
+	./cl -m < $(srcdir)/Matrix/z10                 > l_z10.out
+	./cm -m < $(srcdir)/Matrix/z5up                > z5up.out
+	./cl -m < $(srcdir)/Matrix/z5up                > l_z5up.out
+	./cm -s < $(srcdir)/Matrix/3singular           > 3singular.out
+	./cl -s < $(srcdir)/Matrix/3singular           > l_3singular.out
+	./cm -s < $(srcdir)/Matrix/z3singular          > z3singular.out
+	./cl -s < $(srcdir)/Matrix/z3singular          > l_z3singular.out
+	./cm -s < $(srcdir)/Matrix/c3singular          > c3singular.out
+	./cl -s < $(srcdir)/Matrix/c3singular          > l_c3singular.out
+	./cm -m < $(srcdir)/Matrix/0                   > 0.out
+	./cl -m < $(srcdir)/Matrix/0                   > l_0.out
+	./cm -m < $(srcdir)/Matrix/afiro               > afiro.out
+	./cl -m < $(srcdir)/Matrix/afiro               > l_afiro.out
+	./cm -m < $(srcdir)/Matrix/k01up               > k01up.out
+	./cl -m < $(srcdir)/Matrix/k01up               > l_k01up.out
+	./cm    < $(srcdir)/Matrix/diag                > diag.out
+	./cl    < $(srcdir)/Matrix/diag                > l_diag.out
+	./cm -m < $(srcdir)/Matrix/ex5lo               > ex5lo.out
+	./cl -m < $(srcdir)/Matrix/ex5lo               > l_ex5lo.out
+	./cm    < $(srcdir)/Matrix/20lo                > 20lo.out
+	./cl    < $(srcdir)/Matrix/20lo                > l_20lo.out
+	./cm    < $(srcdir)/Matrix/z30lo               > z30lo.out
+	./cl    < $(srcdir)/Matrix/z30lo               > l_z30lo.out
+	./cm -m < $(srcdir)/Matrix/z30up               > z30up.out
+	./cl -m < $(srcdir)/Matrix/z30up               > l_z30up.out
+	./cm    < $(srcdir)/Matrix/c10                 > c10.out
+	./cl    < $(srcdir)/Matrix/c10                 > l_c10.out
+	./cm    < $(srcdir)/Matrix/c30lo               > c30lo.out
+	./cl    < $(srcdir)/Matrix/c30lo               > l_c30lo.out
+	./cm    < $(srcdir)/Matrix/C9840               > C9840.out
+	./cl    < $(srcdir)/Matrix/C9840               > l_C9840.out
+	./cm -m < $(srcdir)/Matrix/c30up               > c30up.out
+	./cl -m < $(srcdir)/Matrix/c30up               > l_c30up.out
+	./cm    < $(srcdir)/Matrix/pi                  > pi.out
+	./cl    < $(srcdir)/Matrix/pi                  > l_pi.out
+	./cm    < $(srcdir)/Matrix/cpi                 > cpi.out
+	./cl    < $(srcdir)/Matrix/cpi                 > l_cpi.out
+	./cm    < $(srcdir)/Matrix/1_0                 > 1_0.out
+	./cl    < $(srcdir)/Matrix/1_0                 > l_1_0.out
+	./cm -s < $(srcdir)/Matrix/3b                  > 3b.out
+	./cl -s < $(srcdir)/Matrix/3b                  > l_3b.out
+	./cm -s < $(srcdir)/Matrix/cza                 > cza2.out
+	./cl -s < $(srcdir)/Matrix/cza                 > l_cza2.out
+	./cm    < $(srcdir)/Matrix/0_1                 > 0_1.out
+	./cl    < $(srcdir)/Matrix/0_1                 > l_0_1.out
+	./cm -n < $(srcdir)/Matrix/galenet             > galenet_nan.out
+	./cl -n < $(srcdir)/Matrix/galenet             > l_galenet_nan.out
+	./cm    < $(srcdir)/Matrix/zero                > zero.out
+	./cl    < $(srcdir)/Matrix/zero                > zero.out
+
+endif
+endif
+endif
+endif
+endif
+endif
+endif
+
+CLEANFILES = temp*.mtx *.out
diff --git a/cholmod.pc.in b/cholmod.pc.in
new file mode 100644
--- /dev/null
+++ b/cholmod.pc.in
@@ -0,0 +1,13 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Sparse Cholesky factorization
+Version: @PACKAGE_VERSION@
+URL: @PACKAGE_URL@
+Requires.private: @CHOLMOD_REQUIRES@
+Libs: -L${libdir} -lcholmod
+Libs.private: @LAPACK_LIBS@ @BLAS_LIBS@ -lm
+Cflags: -I${includedir}/cholmod
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,221 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([CHOLMOD],[3.0.14],[https://github.com/DrTimothyAldenDavis/SuiteSparse],[cholmod],[http://www.suitesparse.com/])
+AC_CONFIG_SRCDIR([Core/cholmod_common.c])
+AC_CONFIG_AUX_DIR([build-aux])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_HEADERS([config.h Include/cholmod_config.h])
+AM_INIT_AUTOMAKE([foreign])
+AM_SILENT_RULES([yes])
+LT_INIT([disable-static])
+
+# Checks for programs.
+PKG_PROG_PKG_CONFIG
+AC_PROG_INSTALL
+AC_PROG_CC
+AC_PROG_F77
+AC_PROG_AWK
+AC_OPENMP
+AX_CODE_COVERAGE
+
+AC_ARG_ENABLE([mod-check],
+	[AS_HELP_STRING(
+		[--disable-mod-check],
+		[do not build the Check module])],
+	[],
+	[AS_VAR_SET([enable_mod_check], [yes])])
+
+AC_ARG_ENABLE([mod-cholesky],
+	[AS_HELP_STRING(
+		[--disable-mod-cholesky],
+		[do not build the Cholesky module])],
+	[],
+	[AS_VAR_SET([enable_mod_cholesky], [yes])])
+
+AC_ARG_ENABLE([mod-partition],
+	[AS_HELP_STRING(
+		[--disable-mod-partition],
+		[do not build the Partition module])],
+	[],
+	[AS_VAR_SET([enable_mod_partition], [yes])])
+
+AC_ARG_ENABLE([mod-matrixops],
+	[AS_HELP_STRING(
+		[--disable-mod-matrixops],
+		[do not build the MatrixOps module])],
+	[],
+	[AS_VAR_SET([enable_mod_matrixops], [yes])])
+
+AC_ARG_ENABLE([mod-modify],
+	[AS_HELP_STRING(
+		[--disable-mod-modify],
+		[do not build the Modify module])],
+	[],
+	[AS_VAR_SET([enable_mod_modify], [yes])])
+
+AC_ARG_ENABLE([mod-supernodal],
+	[AS_HELP_STRING(
+		[--disable-mod-supernodal],
+		[do not build the Supernodal module])],
+	[],
+	[AS_VAR_SET([enable_mod_supernodal], [yes])])
+
+AC_ARG_ENABLE([gpl-modules],
+	[AS_HELP_STRING(
+		[--disable-gpl-modules],
+		[do not build GPL-licensed modules])],
+	[],
+	[AS_VAR_SET([enable_gpl_modules], [yes])])
+
+AC_ARG_ENABLE([timing],
+	[AS_HELP_STRING(
+		[--disable-timing],
+		[do not use timing routines])],
+	[],
+	[AS_VAR_SET([enable_timing], [yes])])
+
+AS_VAR_SET([LIBS_SAVED], [$LIBS])
+
+# Checks for libraries.
+AC_CHECK_LIB([m], [sqrt])
+
+PKG_CHECK_MODULES([SUITESPARSECONFIG], [suitesparseconfig])
+AS_VAR_SET([CHOLMOD_REQUIRES], ["suitesparseconfig"])
+
+AS_IF([test "x$enable_gpl_modules" != "xyes"], [
+	AC_DEFINE([NGPL], [], [Define to disable GPL-licensed modules])
+	AS_VAR_SET([enable_mod_matrixops], [no])
+	AS_VAR_SET([enable_mod_modify], [no])
+	AS_VAR_SET([enable_mod_supernodal], [no])
+])
+
+AS_IF([test "x$enable_mod_check" != "xyes"], [
+	AC_DEFINE([NCHECK], [], [Define to disable the Check module])
+])
+
+AS_IF([test "x$enable_mod_cholesky" != "xyes"], [
+	AC_DEFINE([NCHOLESKY], [], [Define to disable the Cholesky module])
+], [
+	PKG_CHECK_MODULES([AMD], [amd],
+		[AS_VAR_APPEND([CHOLMOD_REQUIRES], [" amd"])],
+		[AC_MSG_ERROR([$AMD_PKG_ERRORS (required by mod-cholesky)])])
+
+	PKG_CHECK_MODULES([COLAMD], [colamd],
+		[AS_VAR_APPEND([CHOLMOD_REQUIRES], [" colamd"])],
+		[AC_MSG_ERROR([$COLAMD_PKG_ERRORS (required by mod-cholesky)])])
+])
+
+AS_IF([test "x$enable_mod_partition" != "xyes"], [
+	AC_DEFINE([NCAMD], [], [Define to disable the Partition module])
+], [
+	PKG_CHECK_MODULES([CAMD], [camd],
+		[AS_VAR_APPEND([CHOLMOD_REQUIRES], [" camd"])],
+		[AC_MSG_ERROR([$CAMD_PKG_ERRORS (required by mod-partition)])])
+
+	PKG_CHECK_MODULES([CCOLAMD], [ccolamd],
+		[AS_VAR_APPEND([CHOLMOD_REQUIRES], [" ccolamd"])],
+		[AC_MSG_ERROR([$CCOLAMD_PKG_ERRORS (required by mod-partition)])])
+
+	PKG_CHECK_MODULES([METIS], [metis >= 5.1.0],
+		[AS_VAR_SET([have_metis], [yes])
+		 AS_VAR_APPEND([CHOLMOD_REQUIRES], [" metis >= 5.1.0"])],
+		[AS_VAR_SET([have_metis], [no])
+		 AC_MSG_WARN([$METIS_PKG_ERRORS (used by mod-partition), disabling some functionality])])
+])
+
+AS_IF([test "x$have_metis" != "xyes"], [
+	AC_DEFINE([NPARTITION], [], [Define to disable METIS support in the Partition module])
+])
+
+AS_IF([test "x$enable_mod_matrixops" != "xyes"], [
+	AC_DEFINE([NMATRIXOPS], [], [Define to disable the MatrixOps module])
+])
+
+AS_IF([test "x$enable_mod_modify" != "xyes"], [
+	AC_DEFINE([NMODIFY], [], [Define to disable the Modify module])
+])
+
+AS_IF([test "x$enable_mod_supernodal" != "xyes"], [
+	AC_DEFINE([NSUPERNODAL], [], [Define to disable the Supernodal module])
+], [
+	AX_BLAS(
+		[],
+		[AC_MSG_ERROR([cannot find BLAS (required by mod-supernodal)])])
+
+	AX_LAPACK(
+		[],
+		[AC_MSG_ERROR([cannot find LAPACK (required by mod-supernodal)])])
+])
+
+# Checks for header files.
+AC_CHECK_HEADERS([float.h limits.h stddef.h stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([sqrt])
+
+AS_VAR_SET([LIBS], [$LIBS_SAVED])
+
+AC_MSG_CHECKING([whether to build mod-check])
+AC_MSG_RESULT([$enable_mod_check])
+AM_CONDITIONAL([MOD_CHECK], [test "x$enable_mod_check" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-cholesky])
+AC_MSG_RESULT([$enable_mod_cholesky])
+AM_CONDITIONAL([MOD_CHOLESKY], [test "x$enable_mod_cholesky" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-partition])
+AC_MSG_RESULT([$enable_mod_partition])
+AM_CONDITIONAL([MOD_PARTITION], [test "x$enable_mod_partition" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-partition with METIS])
+AC_MSG_RESULT([$have_metis])
+AM_CONDITIONAL([MOD_PARTITION_METIS], [test "x$have_metis" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-matrixops])
+AC_MSG_RESULT([$enable_mod_matrixops])
+AM_CONDITIONAL([MOD_MATRIXOPS], [test "x$enable_mod_matrixops" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-modify])
+AC_MSG_RESULT([$enable_mod_modify])
+AM_CONDITIONAL([MOD_MODIFY], [test "x$enable_mod_modify" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-supernodal])
+AC_MSG_RESULT([$enable_mod_supernodal])
+AM_CONDITIONAL([MOD_SUPERNODAL], [test "x$enable_mod_supernodal" = "xyes"])
+
+AC_MSG_CHECKING([whether to build mod-gpu])
+AC_MSG_RESULT([no])
+AM_CONDITIONAL([MOD_GPU], [false])
+
+AC_MSG_CHECKING([whether to use timing routines])
+AC_MSG_RESULT([$enable_timing])
+AM_CONDITIONAL([TIMING], [test "x$enable_timing" = "xyes"])
+
+AC_SUBST([CHOLMOD_REQUIRES])
+
+m4_ifdef([PKG_INSTALLDIR], [PKG_INSTALLDIR], [AC_SUBST([pkgconfigdir], [${libdir}/pkgconfig])])
+AC_CONFIG_FILES([
+	cholmod.pc
+	Makefile
+	Check/Makefile
+	Cholesky/Makefile
+	Core/Makefile
+	Demo/Makefile
+	Doc/Makefile
+	GPU/Makefile
+	Include/Makefile
+	MATLAB/Makefile
+	MatrixOps/Makefile
+	Modify/Makefile
+	Partition/Makefile
+	Supernodal/Makefile
+	Tcov/Makefile
+])
+AC_CONFIG_LINKS([Tcov/comments.txt:Tcov/comments.txt])
+AC_OUTPUT
diff --git a/m4/ax_blas.m4 b/m4/ax_blas.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_blas.m4
@@ -0,0 +1,241 @@
+# ===========================================================================
+#         https://www.gnu.org/software/autoconf-archive/ax_blas.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_BLAS([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the BLAS linear-algebra
+#   interface (see http://www.netlib.org/blas/). On success, it sets the
+#   BLAS_LIBS output variable to hold the requisite library linkages.
+#
+#   To link with BLAS, you should link with:
+#
+#     $BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by AX_BLAS), and is
+#   sometimes necessary in order to link with F77 libraries. Users will also
+#   need to use AC_F77_DUMMY_MAIN (see the autoconf manual), for the same
+#   reason.
+#
+#   Many libraries are searched for, from ATLAS to CXML to ESSL. The user
+#   may also use --with-blas=<lib> in order to use some specific BLAS
+#   library <lib>. In order to link successfully, however, be aware that you
+#   will probably need to use the same Fortran compiler (which can be set
+#   via the F77 env. var.) as was used to compile the BLAS library.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a BLAS library is
+#   found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it is
+#   not found. If ACTION-IF-FOUND is not specified, the default action will
+#   define HAVE_BLAS.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>
+#   Copyright (c) 2019 Geoffrey M. Oxberry <goxberry@gmail.com>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <https://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 17
+
+AU_ALIAS([ACX_BLAS], [AX_BLAS])
+AC_DEFUN([AX_BLAS], [
+AC_PREREQ([2.55])
+AC_REQUIRE([AC_F77_LIBRARY_LDFLAGS])
+AC_REQUIRE([AC_CANONICAL_HOST])
+ax_blas_ok=no
+
+AC_ARG_WITH(blas,
+	[AS_HELP_STRING([--with-blas=<lib>], [use BLAS library <lib>])])
+case $with_blas in
+	yes | "") ;;
+	no) ax_blas_ok=disable ;;
+	-* | */* | *.a | *.so | *.so.* | *.dylib | *.dylib.* | *.o)
+		BLAS_LIBS="$with_blas"
+	;;
+	*) BLAS_LIBS="-l$with_blas" ;;
+esac
+
+# Get fortran linker names of BLAS functions to check for.
+AC_F77_FUNC(sgemm)
+AC_F77_FUNC(dgemm)
+
+ax_blas_save_LIBS="$LIBS"
+LIBS="$LIBS $FLIBS"
+
+# First, check BLAS_LIBS environment variable
+if test $ax_blas_ok = no; then
+if test "x$BLAS_LIBS" != x; then
+	save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+	AC_MSG_CHECKING([for $sgemm in $BLAS_LIBS])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes], [BLAS_LIBS=""])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+fi
+
+# BLAS linked to by default?  (happens on some supercomputers)
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="$LIBS"
+	AC_MSG_CHECKING([if $sgemm is being linked in already])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in OpenBLAS library? (http://xianyi.github.com/OpenBLAS/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(openblas, $sgemm, [ax_blas_ok=yes
+			                BLAS_LIBS="-lopenblas"])
+fi
+
+# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(atlas, ATL_xerbla,
+		[AC_CHECK_LIB(f77blas, $sgemm,
+		[AC_CHECK_LIB(cblas, cblas_dgemm,
+			[ax_blas_ok=yes
+			 BLAS_LIBS="-lcblas -lf77blas -latlas"],
+			[], [-lf77blas -latlas])],
+			[], [-latlas])])
+fi
+
+# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(dgemm, $dgemm,
+		[AC_CHECK_LIB(sgemm, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lsgemm -ldgemm -lblas"],
+			[], [-lblas])],
+			[], [-lblas])])
+fi
+
+# BLAS in Intel MKL library?
+if test $ax_blas_ok = no; then
+	# MKL for gfortran
+	if test x"$ac_cv_fc_compiler_gnu" = xyes; then
+		# 64 bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_gf_lp64, $sgemm,
+			[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+			[-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32 bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_gf, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_gf -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	# MKL for other compilers (Intel, PGI, ...?)
+	else
+		# 64-bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_intel_lp64, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32-bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_intel, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	fi
+fi
+# Old versions of MKL
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(mkl, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lmkl -lguide -lpthread"],,[-lguide -lpthread])
+fi
+
+# BLAS in Apple vecLib library?
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="-framework vecLib $LIBS"
+	AC_MSG_CHECKING([for $sgemm in -framework vecLib])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes;BLAS_LIBS="-framework vecLib"])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in Alpha CXML library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(cxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lcxml"])
+fi
+
+# BLAS in Alpha DXML library? (now called CXML, see above)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(dxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-ldxml"])
+fi
+
+# BLAS in Sun Performance library?
+if test $ax_blas_ok = no; then
+	if test "x$GCC" != xyes; then # only works with Sun CC
+		AC_CHECK_LIB(sunmath, acosp,
+			[AC_CHECK_LIB(sunperf, $sgemm,
+				[BLAS_LIBS="-xlic_lib=sunperf -lsunmath"
+                                 ax_blas_ok=yes],[],[-lsunmath])])
+	fi
+fi
+
+# BLAS in SCSL library?  (SGI/Cray Scientific Library)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(scs, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lscs"])
+fi
+
+# BLAS in SGIMATH library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(complib.sgimath, $sgemm,
+		     [ax_blas_ok=yes; BLAS_LIBS="-lcomplib.sgimath"])
+fi
+
+# BLAS in IBM ESSL library? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(essl, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lessl -lblas"],
+			[], [-lblas $FLIBS])])
+fi
+
+# Generic BLAS library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lblas"])
+fi
+
+AC_SUBST(BLAS_LIBS)
+
+LIBS="$ax_blas_save_LIBS"
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_blas_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])
+        :
+else
+        ax_blas_ok=no
+        $2
+fi
+])dnl AX_BLAS
diff --git a/m4/ax_code_coverage.m4 b/m4/ax_code_coverage.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_code_coverage.m4
@@ -0,0 +1,271 @@
+# ===========================================================================
+#     https://www.gnu.org/software/autoconf-archive/ax_code_coverage.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_CODE_COVERAGE()
+#
+# DESCRIPTION
+#
+#   Defines CODE_COVERAGE_CPPFLAGS, CODE_COVERAGE_CFLAGS,
+#   CODE_COVERAGE_CXXFLAGS and CODE_COVERAGE_LIBS which should be included
+#   in the CPPFLAGS, CFLAGS CXXFLAGS and LIBS/LIBADD variables of every
+#   build target (program or library) which should be built with code
+#   coverage support. Also defines CODE_COVERAGE_RULES which should be
+#   substituted in your Makefile; and $enable_code_coverage which can be
+#   used in subsequent configure output. CODE_COVERAGE_ENABLED is defined
+#   and substituted, and corresponds to the value of the
+#   --enable-code-coverage option, which defaults to being disabled.
+#
+#   Test also for gcov program and create GCOV variable that could be
+#   substituted.
+#
+#   Note that all optimization flags in CFLAGS must be disabled when code
+#   coverage is enabled.
+#
+#   Usage example:
+#
+#   configure.ac:
+#
+#     AX_CODE_COVERAGE
+#
+#   Makefile.am:
+#
+#     @CODE_COVERAGE_RULES@
+#     my_program_LIBS = ... $(CODE_COVERAGE_LIBS) ...
+#     my_program_CPPFLAGS = ... $(CODE_COVERAGE_CPPFLAGS) ...
+#     my_program_CFLAGS = ... $(CODE_COVERAGE_CFLAGS) ...
+#     my_program_CXXFLAGS = ... $(CODE_COVERAGE_CXXFLAGS) ...
+#
+#   This results in a "check-code-coverage" rule being added to any
+#   Makefile.am which includes "@CODE_COVERAGE_RULES@" (assuming the module
+#   has been configured with --enable-code-coverage). Running `make
+#   check-code-coverage` in that directory will run the module's test suite
+#   (`make check`) and build a code coverage report detailing the code which
+#   was touched, then print the URI for the report.
+#
+#   In earlier versions of this macro, CODE_COVERAGE_LDFLAGS was defined
+#   instead of CODE_COVERAGE_LIBS. They are both still defined, but use of
+#   CODE_COVERAGE_LIBS is preferred for clarity; CODE_COVERAGE_LDFLAGS is
+#   deprecated. They have the same value.
+#
+#   This code was derived from Makefile.decl in GLib, originally licenced
+#   under LGPLv2.1+.
+#
+# LICENSE
+#
+#   Copyright (c) 2012, 2016 Philip Withnall
+#   Copyright (c) 2012 Xan Lopez
+#   Copyright (c) 2012 Christian Persch
+#   Copyright (c) 2012 Paolo Borelli
+#   Copyright (c) 2012 Dan Winship
+#   Copyright (c) 2015 Bastien ROUCARIES
+#
+#   This library is free software; you can redistribute it and/or modify it
+#   under the terms of the GNU Lesser General Public License as published by
+#   the Free Software Foundation; either version 2.1 of the License, or (at
+#   your option) any later version.
+#
+#   This library is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
+#   General Public License for more details.
+#
+#   You should have received a copy of the GNU Lesser General Public License
+#   along with this program. If not, see <https://www.gnu.org/licenses/>.
+
+#serial 27
+
+AC_DEFUN([_AX_CODE_COVERAGE_ENABLED],[
+	# check for gcov
+	AC_CHECK_TOOL([GCOV],
+		  [$_AX_CODE_COVERAGE_GCOV_PROG_WITH],
+		  [:])
+	AS_IF([test "X$GCOV" = "X:"],
+	      [AC_MSG_ERROR([gcov is needed to do coverage])])
+	AC_SUBST([GCOV])
+
+	dnl Check if gcc is being used
+	AS_IF([ test "$GCC" = "no" ], [
+		AC_MSG_ERROR([not compiling with gcc, which is required for gcov code coverage])
+	      ])
+
+	AC_CHECK_PROG([LCOV], [lcov], [lcov])
+	AC_CHECK_PROG([GENHTML], [genhtml], [genhtml])
+
+	AS_IF([ test x"$LCOV" = x ], [
+		AC_MSG_ERROR([To enable code coverage reporting you must have lcov installed])
+	      ])
+
+	AS_IF([ test x"$GENHTML" = x ], [
+		AC_MSG_ERROR([Could not find genhtml from the lcov package])
+	])
+
+	dnl Build the code coverage flags
+	dnl Define CODE_COVERAGE_LDFLAGS for backwards compatibility
+	CODE_COVERAGE_CPPFLAGS="-DNDEBUG"
+	CODE_COVERAGE_CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_CXXFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_LIBS="-lgcov"
+	CODE_COVERAGE_LDFLAGS="$CODE_COVERAGE_LIBS"
+
+	AC_SUBST([CODE_COVERAGE_CPPFLAGS])
+	AC_SUBST([CODE_COVERAGE_CFLAGS])
+	AC_SUBST([CODE_COVERAGE_CXXFLAGS])
+	AC_SUBST([CODE_COVERAGE_LIBS])
+	AC_SUBST([CODE_COVERAGE_LDFLAGS])
+
+	[CODE_COVERAGE_RULES_CHECK='
+	-$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) -k check
+	$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) code-coverage-capture
+']
+		[CODE_COVERAGE_RULES_CAPTURE='
+	$(code_coverage_v_lcov_cap)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --capture --output-file "$(CODE_COVERAGE_OUTPUT_FILE).tmp" --test-name "$(call code_coverage_sanitize,$(PACKAGE_NAME)-$(PACKAGE_VERSION))" --no-checksum --compat-libtool $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_OPTIONS)
+	$(code_coverage_v_lcov_ign)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --remove "$(CODE_COVERAGE_OUTPUT_FILE).tmp" "/tmp/*" $(CODE_COVERAGE_IGNORE_PATTERN) --output-file "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_RMOPTS)
+	-@rm -f $(CODE_COVERAGE_OUTPUT_FILE).tmp
+	$(code_coverage_v_genhtml)LANG=C $(GENHTML) $(code_coverage_quiet) $(addprefix --prefix ,$(CODE_COVERAGE_DIRECTORY)) --output-directory "$(CODE_COVERAGE_OUTPUT_DIRECTORY)" --title "$(PACKAGE_NAME)-$(PACKAGE_VERSION) Code Coverage" --legend --show-details "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_GENHTML_OPTIONS)
+	@echo "file://$(abs_builddir)/$(CODE_COVERAGE_OUTPUT_DIRECTORY)/index.html"
+']
+		[CODE_COVERAGE_RULES_CLEAN='
+clean: code-coverage-clean
+distclean: code-coverage-clean
+code-coverage-clean:
+	-$(LCOV) --directory $(top_builddir) -z
+	-rm -rf $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_FILE).tmp $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+	-find . \( -name "*.gcda" -o -name "*.gcno" -o -name "*.gcov" \) -delete
+']
+])
+
+AC_DEFUN([_AX_CODE_COVERAGE_DISABLED],[
+   [CODE_COVERAGE_RULES_CHECK='
+	@echo "Need to reconfigure with --enable-code-coverage"
+   ']
+   CODE_COVERAGE_RULES_CAPTURE="$CODE_COVERAGE_RULES_CHECK"
+   CODE_COVERAGE_RULES_CLEAN=''
+])
+
+AC_DEFUN([AX_CODE_COVERAGE],[
+	dnl Check for --enable-code-coverage
+
+	# allow to override gcov location
+	AC_ARG_WITH([gcov],
+	  [AS_HELP_STRING([--with-gcov[=GCOV]], [use given GCOV for coverage (GCOV=gcov).])],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=$with_gcov],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=gcov])
+
+	AC_MSG_CHECKING([whether to build with code coverage support])
+	AC_ARG_ENABLE([code-coverage],
+	  AS_HELP_STRING([--enable-code-coverage],
+	  [Whether to enable code coverage support]),,
+	  enable_code_coverage=no)
+
+	AM_CONDITIONAL([CODE_COVERAGE_ENABLED], [test "x$enable_code_coverage" = xyes])
+	AC_SUBST([CODE_COVERAGE_ENABLED], [$enable_code_coverage])
+	AC_MSG_RESULT($enable_code_coverage)
+
+	AS_IF([ test "x$enable_code_coverage" = xyes ], [
+		_AX_CODE_COVERAGE_ENABLED
+	      ], [
+		_AX_CODE_COVERAGE_DISABLED
+	])
+
+[CODE_COVERAGE_RULES='
+# Code coverage
+#
+# Optional:
+#  - CODE_COVERAGE_DIRECTORY: Top-level directory for code coverage reporting.
+#    Multiple directories may be specified, separated by whitespace.
+#    (Default: $(top_builddir))
+#  - CODE_COVERAGE_OUTPUT_FILE: Filename and path for the .info file generated
+#    by lcov for code coverage. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info)
+#  - CODE_COVERAGE_OUTPUT_DIRECTORY: Directory for generated code coverage
+#    reports to be created. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage)
+#  - CODE_COVERAGE_BRANCH_COVERAGE: Set to 1 to enforce branch coverage,
+#    set to 0 to disable it and leave empty to stay with the default.
+#    (Default: empty)
+#  - CODE_COVERAGE_LCOV_SHOPTS_DEFAULT: Extra options shared between both lcov
+#    instances. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_LCOV_SHOPTS: Extra options to shared between both lcov
+#    instances. (Default: $CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH: --gcov-tool pathtogcov
+#  - CODE_COVERAGE_LCOV_OPTIONS_DEFAULT: Extra options to pass to the
+#    collecting lcov instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+#  - CODE_COVERAGE_LCOV_OPTIONS: Extra options to pass to the collecting lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_RMOPTS_DEFAULT: Extra options to pass to the filtering
+#    lcov instance. (Default: empty)
+#  - CODE_COVERAGE_LCOV_RMOPTS: Extra options to pass to the filtering lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+#  - CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT: Extra options to pass to the
+#    genhtml instance. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_GENHTML_OPTIONS: Extra options to pass to the genhtml
+#    instance. (Default: $CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore
+#
+# The generated report will be titled using the $(PACKAGE_NAME) and
+# $(PACKAGE_VERSION). In order to add the current git hash to the title,
+# use the git-version-gen script, available online.
+
+# Optional variables
+CODE_COVERAGE_DIRECTORY ?= $(top_builddir)
+CODE_COVERAGE_OUTPUT_FILE ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info
+CODE_COVERAGE_OUTPUT_DIRECTORY ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage
+CODE_COVERAGE_BRANCH_COVERAGE ?=
+CODE_COVERAGE_LCOV_SHOPTS_DEFAULT ?= $(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc lcov_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_LCOV_SHOPTS ?= $(CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH ?= --gcov-tool "$(GCOV)"
+CODE_COVERAGE_LCOV_OPTIONS_DEFAULT ?= $(CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+CODE_COVERAGE_LCOV_OPTIONS ?= $(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+CODE_COVERAGE_LCOV_RMOPTS_DEFAULT ?=
+CODE_COVERAGE_LCOV_RMOPTS ?= $(CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT ?=\
+$(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc genhtml_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_GENHTML_OPTIONS ?= $(CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+CODE_COVERAGE_IGNORE_PATTERN ?=
+
+GITIGNOREFILES ?=
+GITIGNOREFILES += $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+
+code_coverage_v_lcov_cap = $(code_coverage_v_lcov_cap_$(V))
+code_coverage_v_lcov_cap_ = $(code_coverage_v_lcov_cap_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_cap_0 = @echo "  LCOV   --capture"\
+ $(CODE_COVERAGE_OUTPUT_FILE);
+code_coverage_v_lcov_ign = $(code_coverage_v_lcov_ign_$(V))
+code_coverage_v_lcov_ign_ = $(code_coverage_v_lcov_ign_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_ign_0 = @echo "  LCOV   --remove /tmp/*"\
+ $(CODE_COVERAGE_IGNORE_PATTERN);
+code_coverage_v_genhtml = $(code_coverage_v_genhtml_$(V))
+code_coverage_v_genhtml_ = $(code_coverage_v_genhtml_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_genhtml_0 = @echo "  GEN   " $(CODE_COVERAGE_OUTPUT_DIRECTORY);
+code_coverage_quiet = $(code_coverage_quiet_$(V))
+code_coverage_quiet_ = $(code_coverage_quiet_$(AM_DEFAULT_VERBOSITY))
+code_coverage_quiet_0 = --quiet
+
+# sanitizes the test-name: replaces with underscores: dashes and dots
+code_coverage_sanitize = $(subst -,_,$(subst .,_,$(1)))
+
+# Use recursive makes in order to ignore errors during check
+check-code-coverage:'"$CODE_COVERAGE_RULES_CHECK"'
+
+# Capture code coverage data
+code-coverage-capture: code-coverage-capture-hook'"$CODE_COVERAGE_RULES_CAPTURE"'
+
+# Hook rule executed before code-coverage-capture, overridable by the user
+code-coverage-capture-hook:
+
+'"$CODE_COVERAGE_RULES_CLEAN"'
+
+A''M_DISTCHECK_CONFIGURE_FLAGS ?=
+A''M_DISTCHECK_CONFIGURE_FLAGS += --disable-code-coverage
+
+.PHONY: check-code-coverage code-coverage-capture code-coverage-capture-hook code-coverage-clean
+']
+
+	AC_SUBST([CODE_COVERAGE_RULES])
+	m4_ifdef([_AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE([CODE_COVERAGE_RULES])])
+])
diff --git a/m4/ax_lapack.m4 b/m4/ax_lapack.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_lapack.m4
@@ -0,0 +1,134 @@
+# ===========================================================================
+#        https://www.gnu.org/software/autoconf-archive/ax_lapack.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_LAPACK([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the LAPACK linear-algebra
+#   interface (see http://www.netlib.org/lapack/). On success, it sets the
+#   LAPACK_LIBS output variable to hold the requisite library linkages.
+#
+#   To link with LAPACK, you should link with:
+#
+#     $LAPACK_LIBS $BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. BLAS_LIBS is the output variable of the AX_BLAS macro,
+#   called automatically. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by AX_BLAS), and is
+#   sometimes necessary in order to link with F77 libraries. Users will also
+#   need to use AC_F77_DUMMY_MAIN (see the autoconf manual), for the same
+#   reason.
+#
+#   The user may also use --with-lapack=<lib> in order to use some specific
+#   LAPACK library <lib>. In order to link successfully, however, be aware
+#   that you will probably need to use the same Fortran compiler (which can
+#   be set via the F77 env. var.) as was used to compile the LAPACK and BLAS
+#   libraries.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a LAPACK library
+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it
+#   is not found. If ACTION-IF-FOUND is not specified, the default action
+#   will define HAVE_LAPACK.
+#
+# LICENSE
+#
+#   Copyright (c) 2009 Steven G. Johnson <stevenj@alum.mit.edu>
+#   Copyright (c) 2019 Geoffrey M. Oxberry <goxberry@gmail.com>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <https://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 10
+
+AU_ALIAS([ACX_LAPACK], [AX_LAPACK])
+AC_DEFUN([AX_LAPACK], [
+AC_REQUIRE([AX_BLAS])
+ax_lapack_ok=no
+
+AC_ARG_WITH(lapack,
+        [AS_HELP_STRING([--with-lapack=<lib>], [use LAPACK library <lib>])])
+case $with_lapack in
+        yes | "") ;;
+        no) ax_lapack_ok=disable ;;
+        -* | */* | *.a | *.so | *.so.* | *.dylib | *.dylib.* | *.o)
+                 LAPACK_LIBS="$with_lapack"
+        ;;
+        *) LAPACK_LIBS="-l$with_lapack" ;;
+esac
+
+# Get fortran linker name of LAPACK function to check for.
+AC_F77_FUNC(cheev)
+
+# We cannot use LAPACK if BLAS is not found
+if test "x$ax_blas_ok" != xyes; then
+        ax_lapack_ok=noblas
+        LAPACK_LIBS=""
+fi
+
+# First, check LAPACK_LIBS environment variable
+if test "x$LAPACK_LIBS" != x; then
+        save_LIBS="$LIBS"; LIBS="$LAPACK_LIBS $BLAS_LIBS $LIBS $FLIBS"
+        AC_MSG_CHECKING([for $cheev in $LAPACK_LIBS])
+        AC_LINK_IFELSE([AC_LANG_CALL([], [$cheev])], [ax_lapack_ok=yes], [LAPACK_LIBS=""])
+        AC_MSG_RESULT($ax_lapack_ok)
+        LIBS="$save_LIBS"
+        if test $ax_lapack_ok = no; then
+                LAPACK_LIBS=""
+        fi
+fi
+
+# LAPACK linked to by default?  (is sometimes included in BLAS lib)
+if test $ax_lapack_ok = no; then
+        save_LIBS="$LIBS"; LIBS="$LIBS $BLAS_LIBS $FLIBS"
+        AC_CHECK_FUNC($cheev, [ax_lapack_ok=yes])
+        LIBS="$save_LIBS"
+fi
+
+# Generic LAPACK library?
+for lapack in lapack lapack_rs6k; do
+        if test $ax_lapack_ok = no; then
+                save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+                AC_CHECK_LIB($lapack, $cheev,
+                    [ax_lapack_ok=yes; LAPACK_LIBS="-l$lapack"], [], [$FLIBS])
+                LIBS="$save_LIBS"
+        fi
+done
+
+AC_SUBST(LAPACK_LIBS)
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_lapack_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_LAPACK,1,[Define if you have LAPACK library.]),[$1])
+        :
+else
+        ax_lapack_ok=no
+        $2
+fi
+])dnl AX_LAPACK
