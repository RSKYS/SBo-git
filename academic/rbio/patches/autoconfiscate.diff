diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,94 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+LDADD = $(top_builddir)/Source/librbio.la $(SUITESPARSECONFIG_LIBS)
+
+EXTRA_DIST = \
+	RBdemo.out
+
+# Disable the .out implicit pattern rule.  Prevents GNU make from
+# adding bogus dependencies for the .out files listed above.
+%.out: %
+
+check_PROGRAMS = \
+	RBdemo
+
+RBdemo_SOURCES = \
+	RBdemo.c
+
+if !CODE_COVERAGE_ENABLED
+RB = \
+	$(top_srcdir)/RBio/private/west0479.rua
+
+check-local: $(check_PROGRAMS) $(RB)
+	./RBdemo < $(top_srcdir)/RBio/private/west0479.rua
+
+else
+TAR = tar -O -xvvzf
+
+RB = \
+	$(top_srcdir)/RBio/private/bcsstk01.rb \
+	$(top_srcdir)/RBio/private/farm.rb \
+	$(top_srcdir)/RBio/private/lap_25.pse \
+	$(top_srcdir)/RBio/private/lap_25.rb \
+	$(top_srcdir)/RBio/private/west0479.rb \
+	$(top_srcdir)/RBio/private/west0479.rua \
+	$(top_srcdir)/Tcov/matrices/dwg961a.tar.gz \
+	$(top_srcdir)/Tcov/matrices/mhd1280a.tar.gz \
+	$(top_srcdir)/Tcov/matrices/mhd1280b.tar.gz \
+	$(top_srcdir)/Tcov/matrices/qc324.tar.gz \
+	$(top_srcdir)/Tcov/matrices/plskz362.tar.gz \
+	$(top_srcdir)/Tcov/matrices/west0067.tar.gz \
+	$(top_srcdir)/Tcov/matrices/Tina_DisCog.tar.gz \
+	$(top_srcdir)/Tcov/matrices/m4.rb \
+	$(top_srcdir)/Tcov/matrices/s4.rb \
+	$(top_srcdir)/Tcov/matrices/m4b.rb \
+	$(top_srcdir)/Tcov/mangled/1.rb \
+	$(top_srcdir)/Tcov/mangled/2.rb \
+	$(top_srcdir)/Tcov/mangled/3.rb \
+	$(top_srcdir)/Tcov/mangled/4.rb \
+	$(top_srcdir)/Tcov/mangled/5.rb \
+	$(top_srcdir)/Tcov/mangled/6.rb \
+	$(top_srcdir)/Tcov/mangled/7.rb \
+	$(top_srcdir)/Tcov/mangled/8.rb \
+	$(top_srcdir)/Tcov/mangled/9.rb \
+	$(top_srcdir)/Tcov/mangled/10.rb \
+	$(top_srcdir)/Tcov/mangled/11.rb \
+	$(top_srcdir)/Tcov/mangled/12.rb \
+	$(top_srcdir)/Tcov/mangled/13.rb \
+	$(top_srcdir)/Tcov/mangled/14.rb \
+	$(top_srcdir)/Tcov/mangled/15.rb
+
+check-local: $(check_PROGRAMS) $(RB)
+	-./RBdemo $(top_srcdir)/RBio/private/bcsstk01.rb
+	-./RBdemo $(top_srcdir)/RBio/private/farm.rb
+	-./RBdemo $(top_srcdir)/RBio/private/lap_25.pse
+	-./RBdemo $(top_srcdir)/RBio/private/lap_25.rb
+	-./RBdemo $(top_srcdir)/RBio/private/west0479.rb
+	-./RBdemo $(top_srcdir)/RBio/private/west0479.rua
+	-$(TAR) $(top_srcdir)/Tcov/matrices/dwg961a.tar.gz     dwg961a/dwg961a.rb         | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/mhd1280a.tar.gz    mhd1280a/mhd1280a.rb       | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/mhd1280b.tar.gz    mhd1280b/mhd1280b.rb       | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/qc324.tar.gz       qc324/qc324.rb             | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/plskz362.tar.gz    plskz362/plskz362.rb       | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/west0067.tar.gz    west0067/west0067.rb       | ./RBdemo
+	-$(TAR) $(top_srcdir)/Tcov/matrices/Tina_DisCog.tar.gz Tina_DisCog/Tina_DisCog.rb | ./RBdemo
+	-./RBdemo $(top_srcdir)/Tcov/matrices/m4.rb
+	-./RBdemo $(top_srcdir)/Tcov/matrices/s4.rb
+	-./RBdemo $(top_srcdir)/Tcov/matrices/m4b.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/1.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/2.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/3.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/4.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/5.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/6.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/7.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/8.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/9.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/10.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/11.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/12.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/13.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/14.rb
+	-./RBdemo $(top_srcdir)/Tcov/mangled/15.rb
+endif
+
+CLEANFILES = temp.rb
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1 @@
+pkginclude_HEADERS = RBio.h
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,9 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = Include Source RBio Demo Tcov
+EXTRA_DIST = README.txt Doc/ChangeLog Doc/License.txt Doc/gpl.txt
+
+pkgconfig_DATA = rbio.pc
+
+CODE_COVERAGE_BRANCH_COVERAGE = 1
+@CODE_COVERAGE_RULES@
diff --git a/RBio/Makefile.am b/RBio/Makefile.am
new file mode 100644
--- /dev/null
+++ b/RBio/Makefile.am
@@ -0,0 +1,3 @@
+SUBDIRS = private
+dist_noinst_DATA = \
+	mywest
diff --git a/RBio/private/Makefile.am b/RBio/private/Makefile.am
new file mode 100644
--- /dev/null
+++ b/RBio/private/Makefile.am
@@ -0,0 +1,7 @@
+dist_noinst_DATA = \
+	bcsstk01.rb \
+	farm.rb \
+	lap_25.pse \
+	lap_25.rb \
+	west0479.rb \
+	west0479.rua
diff --git a/Source/Makefile.am b/Source/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Source/Makefile.am
@@ -0,0 +1,21 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+RBIOSRC = \
+	RBio.c
+
+lib_LTLIBRARIES = librbio.la
+noinst_LTLIBRARIES = librbioi.la librbiol.la
+
+librbioi_la_SOURCES = $(RBIOSRC)
+librbioi_la_LIBADD = $(SUITESPARSECONFIG_LIBS)
+librbioi_la_CPPFLAGS = $(AM_CPPFLAGS) -DINT
+librbioi_la_CFLAGS = $(AM_CFLAGS)
+
+librbiol_la_SOURCES = $(RBIOSRC)
+librbiol_la_LIBADD = $(SUITESPARSECONFIG_LIBS) $(CODE_COVERAGE_LIBS)
+librbiol_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+librbiol_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
+
+librbio_la_SOURCES =
+librbio_la_LIBADD = librbioi.la librbiol.la
+librbio_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
diff --git a/Tcov/Makefile.am b/Tcov/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Tcov/Makefile.am
@@ -0,0 +1,45 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+LDADD = $(top_builddir)/Source/librbio.la $(SUITESPARSECONFIG_LIBS)
+
+EXTRA_DIST = \
+	README.txt
+
+dist_noinst_DATA = \
+	matrices/Tina_DisCog.tar.gz \
+	matrices/dwg961a.tar.gz \
+	matrices/m4.rb \
+	matrices/m4b.rb \
+	matrices/mhd1280a.tar.gz \
+	matrices/mhd1280b.tar.gz \
+	matrices/plskz362.tar.gz \
+	matrices/qc324.tar.gz \
+	matrices/s4.rb \
+	matrices/west0067.tar.gz \
+	mangled/1.rb \
+	mangled/2.rb \
+	mangled/3.rb \
+	mangled/4.rb \
+	mangled/5.rb \
+	mangled/6.rb \
+	mangled/7.rb \
+	mangled/8.rb \
+	mangled/9.rb \
+	mangled/10.rb \
+	mangled/11.rb \
+	mangled/12.rb \
+	mangled/13.rb \
+	mangled/14.rb \
+	mangled/15.rb
+
+if CODE_COVERAGE_ENABLED
+check_PROGRAMS = \
+	RBtest
+
+RBtest_SOURCES = \
+	RBtest.c
+
+check-local: $(check_PROGRAMS)
+	-./RBtest
+endif
+
+CLEANFILES = temp*.rb
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,45 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([RBio],[2.2.6],[https://github.com/DrTimothyAldenDavis/SuiteSparse],[rbio],[http://www.suitesparse.com/])
+AC_CONFIG_SRCDIR([Source/RBio.c])
+AC_CONFIG_AUX_DIR([build-aux])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([foreign])
+AM_SILENT_RULES([yes])
+LT_INIT([disable-static])
+
+# Checks for programs.
+PKG_PROG_PKG_CONFIG
+AC_PROG_INSTALL
+AC_PROG_CC
+AX_CODE_COVERAGE
+
+AS_VAR_SET([LIBS_SAVED], [$LIBS])
+
+# Checks for libraries.
+PKG_CHECK_MODULES([SUITESPARSECONFIG], [suitesparseconfig])
+
+# Checks for header files.
+AC_CHECK_HEADERS([stddef.h stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+
+# Checks for library functions.
+
+AS_VAR_SET([LIBS], [$LIBS_SAVED])
+
+m4_ifdef([PKG_INSTALLDIR], [PKG_INSTALLDIR], [AC_SUBST([pkgconfigdir], [${libdir}/pkgconfig])])
+AC_CONFIG_FILES([
+	rbio.pc
+	Makefile
+	Demo/Makefile
+	Include/Makefile
+	RBio/Makefile
+	RBio/private/Makefile
+	Source/Makefile
+	Tcov/Makefile
+])
+AC_OUTPUT
diff --git a/m4/ax_code_coverage.m4 b/m4/ax_code_coverage.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_code_coverage.m4
@@ -0,0 +1,271 @@
+# ===========================================================================
+#     https://www.gnu.org/software/autoconf-archive/ax_code_coverage.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_CODE_COVERAGE()
+#
+# DESCRIPTION
+#
+#   Defines CODE_COVERAGE_CPPFLAGS, CODE_COVERAGE_CFLAGS,
+#   CODE_COVERAGE_CXXFLAGS and CODE_COVERAGE_LIBS which should be included
+#   in the CPPFLAGS, CFLAGS CXXFLAGS and LIBS/LIBADD variables of every
+#   build target (program or library) which should be built with code
+#   coverage support. Also defines CODE_COVERAGE_RULES which should be
+#   substituted in your Makefile; and $enable_code_coverage which can be
+#   used in subsequent configure output. CODE_COVERAGE_ENABLED is defined
+#   and substituted, and corresponds to the value of the
+#   --enable-code-coverage option, which defaults to being disabled.
+#
+#   Test also for gcov program and create GCOV variable that could be
+#   substituted.
+#
+#   Note that all optimization flags in CFLAGS must be disabled when code
+#   coverage is enabled.
+#
+#   Usage example:
+#
+#   configure.ac:
+#
+#     AX_CODE_COVERAGE
+#
+#   Makefile.am:
+#
+#     @CODE_COVERAGE_RULES@
+#     my_program_LIBS = ... $(CODE_COVERAGE_LIBS) ...
+#     my_program_CPPFLAGS = ... $(CODE_COVERAGE_CPPFLAGS) ...
+#     my_program_CFLAGS = ... $(CODE_COVERAGE_CFLAGS) ...
+#     my_program_CXXFLAGS = ... $(CODE_COVERAGE_CXXFLAGS) ...
+#
+#   This results in a "check-code-coverage" rule being added to any
+#   Makefile.am which includes "@CODE_COVERAGE_RULES@" (assuming the module
+#   has been configured with --enable-code-coverage). Running `make
+#   check-code-coverage` in that directory will run the module's test suite
+#   (`make check`) and build a code coverage report detailing the code which
+#   was touched, then print the URI for the report.
+#
+#   In earlier versions of this macro, CODE_COVERAGE_LDFLAGS was defined
+#   instead of CODE_COVERAGE_LIBS. They are both still defined, but use of
+#   CODE_COVERAGE_LIBS is preferred for clarity; CODE_COVERAGE_LDFLAGS is
+#   deprecated. They have the same value.
+#
+#   This code was derived from Makefile.decl in GLib, originally licenced
+#   under LGPLv2.1+.
+#
+# LICENSE
+#
+#   Copyright (c) 2012, 2016 Philip Withnall
+#   Copyright (c) 2012 Xan Lopez
+#   Copyright (c) 2012 Christian Persch
+#   Copyright (c) 2012 Paolo Borelli
+#   Copyright (c) 2012 Dan Winship
+#   Copyright (c) 2015 Bastien ROUCARIES
+#
+#   This library is free software; you can redistribute it and/or modify it
+#   under the terms of the GNU Lesser General Public License as published by
+#   the Free Software Foundation; either version 2.1 of the License, or (at
+#   your option) any later version.
+#
+#   This library is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
+#   General Public License for more details.
+#
+#   You should have received a copy of the GNU Lesser General Public License
+#   along with this program. If not, see <https://www.gnu.org/licenses/>.
+
+#serial 27
+
+AC_DEFUN([_AX_CODE_COVERAGE_ENABLED],[
+	# check for gcov
+	AC_CHECK_TOOL([GCOV],
+		  [$_AX_CODE_COVERAGE_GCOV_PROG_WITH],
+		  [:])
+	AS_IF([test "X$GCOV" = "X:"],
+	      [AC_MSG_ERROR([gcov is needed to do coverage])])
+	AC_SUBST([GCOV])
+
+	dnl Check if gcc is being used
+	AS_IF([ test "$GCC" = "no" ], [
+		AC_MSG_ERROR([not compiling with gcc, which is required for gcov code coverage])
+	      ])
+
+	AC_CHECK_PROG([LCOV], [lcov], [lcov])
+	AC_CHECK_PROG([GENHTML], [genhtml], [genhtml])
+
+	AS_IF([ test x"$LCOV" = x ], [
+		AC_MSG_ERROR([To enable code coverage reporting you must have lcov installed])
+	      ])
+
+	AS_IF([ test x"$GENHTML" = x ], [
+		AC_MSG_ERROR([Could not find genhtml from the lcov package])
+	])
+
+	dnl Build the code coverage flags
+	dnl Define CODE_COVERAGE_LDFLAGS for backwards compatibility
+	CODE_COVERAGE_CPPFLAGS="-DNDEBUG"
+	CODE_COVERAGE_CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_CXXFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_LIBS="-lgcov"
+	CODE_COVERAGE_LDFLAGS="$CODE_COVERAGE_LIBS"
+
+	AC_SUBST([CODE_COVERAGE_CPPFLAGS])
+	AC_SUBST([CODE_COVERAGE_CFLAGS])
+	AC_SUBST([CODE_COVERAGE_CXXFLAGS])
+	AC_SUBST([CODE_COVERAGE_LIBS])
+	AC_SUBST([CODE_COVERAGE_LDFLAGS])
+
+	[CODE_COVERAGE_RULES_CHECK='
+	-$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) -k check
+	$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) code-coverage-capture
+']
+		[CODE_COVERAGE_RULES_CAPTURE='
+	$(code_coverage_v_lcov_cap)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --capture --output-file "$(CODE_COVERAGE_OUTPUT_FILE).tmp" --test-name "$(call code_coverage_sanitize,$(PACKAGE_NAME)-$(PACKAGE_VERSION))" --no-checksum --compat-libtool $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_OPTIONS)
+	$(code_coverage_v_lcov_ign)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --remove "$(CODE_COVERAGE_OUTPUT_FILE).tmp" "/tmp/*" $(CODE_COVERAGE_IGNORE_PATTERN) --output-file "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_RMOPTS)
+	-@rm -f $(CODE_COVERAGE_OUTPUT_FILE).tmp
+	$(code_coverage_v_genhtml)LANG=C $(GENHTML) $(code_coverage_quiet) $(addprefix --prefix ,$(CODE_COVERAGE_DIRECTORY)) --output-directory "$(CODE_COVERAGE_OUTPUT_DIRECTORY)" --title "$(PACKAGE_NAME)-$(PACKAGE_VERSION) Code Coverage" --legend --show-details "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_GENHTML_OPTIONS)
+	@echo "file://$(abs_builddir)/$(CODE_COVERAGE_OUTPUT_DIRECTORY)/index.html"
+']
+		[CODE_COVERAGE_RULES_CLEAN='
+clean: code-coverage-clean
+distclean: code-coverage-clean
+code-coverage-clean:
+	-$(LCOV) --directory $(top_builddir) -z
+	-rm -rf $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_FILE).tmp $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+	-find . \( -name "*.gcda" -o -name "*.gcno" -o -name "*.gcov" \) -delete
+']
+])
+
+AC_DEFUN([_AX_CODE_COVERAGE_DISABLED],[
+   [CODE_COVERAGE_RULES_CHECK='
+	@echo "Need to reconfigure with --enable-code-coverage"
+   ']
+   CODE_COVERAGE_RULES_CAPTURE="$CODE_COVERAGE_RULES_CHECK"
+   CODE_COVERAGE_RULES_CLEAN=''
+])
+
+AC_DEFUN([AX_CODE_COVERAGE],[
+	dnl Check for --enable-code-coverage
+
+	# allow to override gcov location
+	AC_ARG_WITH([gcov],
+	  [AS_HELP_STRING([--with-gcov[=GCOV]], [use given GCOV for coverage (GCOV=gcov).])],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=$with_gcov],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=gcov])
+
+	AC_MSG_CHECKING([whether to build with code coverage support])
+	AC_ARG_ENABLE([code-coverage],
+	  AS_HELP_STRING([--enable-code-coverage],
+	  [Whether to enable code coverage support]),,
+	  enable_code_coverage=no)
+
+	AM_CONDITIONAL([CODE_COVERAGE_ENABLED], [test "x$enable_code_coverage" = xyes])
+	AC_SUBST([CODE_COVERAGE_ENABLED], [$enable_code_coverage])
+	AC_MSG_RESULT($enable_code_coverage)
+
+	AS_IF([ test "x$enable_code_coverage" = xyes ], [
+		_AX_CODE_COVERAGE_ENABLED
+	      ], [
+		_AX_CODE_COVERAGE_DISABLED
+	])
+
+[CODE_COVERAGE_RULES='
+# Code coverage
+#
+# Optional:
+#  - CODE_COVERAGE_DIRECTORY: Top-level directory for code coverage reporting.
+#    Multiple directories may be specified, separated by whitespace.
+#    (Default: $(top_builddir))
+#  - CODE_COVERAGE_OUTPUT_FILE: Filename and path for the .info file generated
+#    by lcov for code coverage. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info)
+#  - CODE_COVERAGE_OUTPUT_DIRECTORY: Directory for generated code coverage
+#    reports to be created. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage)
+#  - CODE_COVERAGE_BRANCH_COVERAGE: Set to 1 to enforce branch coverage,
+#    set to 0 to disable it and leave empty to stay with the default.
+#    (Default: empty)
+#  - CODE_COVERAGE_LCOV_SHOPTS_DEFAULT: Extra options shared between both lcov
+#    instances. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_LCOV_SHOPTS: Extra options to shared between both lcov
+#    instances. (Default: $CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH: --gcov-tool pathtogcov
+#  - CODE_COVERAGE_LCOV_OPTIONS_DEFAULT: Extra options to pass to the
+#    collecting lcov instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+#  - CODE_COVERAGE_LCOV_OPTIONS: Extra options to pass to the collecting lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_RMOPTS_DEFAULT: Extra options to pass to the filtering
+#    lcov instance. (Default: empty)
+#  - CODE_COVERAGE_LCOV_RMOPTS: Extra options to pass to the filtering lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+#  - CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT: Extra options to pass to the
+#    genhtml instance. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_GENHTML_OPTIONS: Extra options to pass to the genhtml
+#    instance. (Default: $CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore
+#
+# The generated report will be titled using the $(PACKAGE_NAME) and
+# $(PACKAGE_VERSION). In order to add the current git hash to the title,
+# use the git-version-gen script, available online.
+
+# Optional variables
+CODE_COVERAGE_DIRECTORY ?= $(top_builddir)
+CODE_COVERAGE_OUTPUT_FILE ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info
+CODE_COVERAGE_OUTPUT_DIRECTORY ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage
+CODE_COVERAGE_BRANCH_COVERAGE ?=
+CODE_COVERAGE_LCOV_SHOPTS_DEFAULT ?= $(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc lcov_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_LCOV_SHOPTS ?= $(CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH ?= --gcov-tool "$(GCOV)"
+CODE_COVERAGE_LCOV_OPTIONS_DEFAULT ?= $(CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+CODE_COVERAGE_LCOV_OPTIONS ?= $(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+CODE_COVERAGE_LCOV_RMOPTS_DEFAULT ?=
+CODE_COVERAGE_LCOV_RMOPTS ?= $(CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT ?=\
+$(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc genhtml_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_GENHTML_OPTIONS ?= $(CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+CODE_COVERAGE_IGNORE_PATTERN ?=
+
+GITIGNOREFILES ?=
+GITIGNOREFILES += $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+
+code_coverage_v_lcov_cap = $(code_coverage_v_lcov_cap_$(V))
+code_coverage_v_lcov_cap_ = $(code_coverage_v_lcov_cap_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_cap_0 = @echo "  LCOV   --capture"\
+ $(CODE_COVERAGE_OUTPUT_FILE);
+code_coverage_v_lcov_ign = $(code_coverage_v_lcov_ign_$(V))
+code_coverage_v_lcov_ign_ = $(code_coverage_v_lcov_ign_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_ign_0 = @echo "  LCOV   --remove /tmp/*"\
+ $(CODE_COVERAGE_IGNORE_PATTERN);
+code_coverage_v_genhtml = $(code_coverage_v_genhtml_$(V))
+code_coverage_v_genhtml_ = $(code_coverage_v_genhtml_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_genhtml_0 = @echo "  GEN   " $(CODE_COVERAGE_OUTPUT_DIRECTORY);
+code_coverage_quiet = $(code_coverage_quiet_$(V))
+code_coverage_quiet_ = $(code_coverage_quiet_$(AM_DEFAULT_VERBOSITY))
+code_coverage_quiet_0 = --quiet
+
+# sanitizes the test-name: replaces with underscores: dashes and dots
+code_coverage_sanitize = $(subst -,_,$(subst .,_,$(1)))
+
+# Use recursive makes in order to ignore errors during check
+check-code-coverage:'"$CODE_COVERAGE_RULES_CHECK"'
+
+# Capture code coverage data
+code-coverage-capture: code-coverage-capture-hook'"$CODE_COVERAGE_RULES_CAPTURE"'
+
+# Hook rule executed before code-coverage-capture, overridable by the user
+code-coverage-capture-hook:
+
+'"$CODE_COVERAGE_RULES_CLEAN"'
+
+A''M_DISTCHECK_CONFIGURE_FLAGS ?=
+A''M_DISTCHECK_CONFIGURE_FLAGS += --disable-code-coverage
+
+.PHONY: check-code-coverage code-coverage-capture code-coverage-capture-hook code-coverage-clean
+']
+
+	AC_SUBST([CODE_COVERAGE_RULES])
+	m4_ifdef([_AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE([CODE_COVERAGE_RULES])])
+])
diff --git a/rbio.pc.in b/rbio.pc.in
new file mode 100644
--- /dev/null
+++ b/rbio.pc.in
@@ -0,0 +1,12 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Toolbox for reading/writing sparse matrices in Rutherford/Boeing format
+Version: @PACKAGE_VERSION@
+URL: @PACKAGE_URL@
+Requires.private: suitesparseconfig
+Libs: -L${libdir} -lrbio
+Cflags: -I${includedir}/rbio
