diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,162 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(AMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	umfpack_di_demo.out \
+	umfpack_dl_demo.out \
+	umfpack_zi_demo.out \
+	umfpack_zl_demo.out \
+	umf4.out \
+	umf4hb.out \
+	umf4hb64.out \
+	umf4zhb.out
+
+# Disable the .out implicit pattern rule.  Prevents GNU make from
+# adding bogus dependencies for the .out files listed above.
+%.out: %
+
+SIMPLE = \
+	umfpack_simple
+
+DEMO = \
+	umfpack_di_demo \
+	umfpack_dl_demo \
+	umfpack_zi_demo \
+	umfpack_zl_demo
+
+READHB = \
+	readhb \
+	readhb_nozeros \
+	readhb_size
+
+UMF4 = \
+	umf4
+
+UMF4HB = \
+	umf4hb \
+	umf4hb64 \
+	umf4zhb
+
+HB = \
+	HB/arc130.rua \
+	HB/can_24.psa \
+	HB/fs_183_6.rua \
+	HB/qc324.cua \
+	HB/west0067.rua
+
+umfpack_%_demo.c: umfpack_xx_demo.c umfpack_%_demo.sed
+	-sed -f umfpack_$*_demo.sed < umfpack_xx_demo.c > umfpack_$*_demo.c
+
+dist_noinst_DATA = \
+	umfpack_xx_demo.c \
+	umfpack_di_demo.sed \
+	umfpack_dl_demo.sed \
+	umfpack_zi_demo.sed \
+	umfpack_zl_demo.sed \
+	$(HB)
+
+dist_noinst_SCRIPTS = \
+	dodefault \
+	dospd
+
+check_PROGRAMS = \
+	$(SIMPLE) \
+	$(DEMO) \
+	$(READHB) \
+	$(UMF4) \
+	$(UMF4HB)
+
+check_LTLIBRARIES = \
+	libumf4_f77wrapper.la \
+	libumf4_f77zwrapper.la \
+	libumf4_f77wrapper64.la \
+	libumf4_f77zwrapper64.la
+
+umfpack_simple_SOURCES = umfpack_simple.c
+umfpack_simple_LDADD = $(top_builddir)/Source/libumfpack.la
+
+umfpack_di_demo_SOURCES = umfpack_di_demo.c
+umfpack_di_demo_LDADD = $(top_builddir)/Source/libumfpack.la
+
+umfpack_dl_demo_SOURCES = umfpack_dl_demo.c
+umfpack_dl_demo_LDADD = $(top_builddir)/Source/libumfpack.la
+
+umfpack_zi_demo_SOURCES = umfpack_zi_demo.c
+umfpack_zi_demo_LDADD = $(top_builddir)/Source/libumfpack.la
+
+umfpack_zl_demo_SOURCES = umfpack_zl_demo.c
+umfpack_zl_demo_LDADD = $(top_builddir)/Source/libumfpack.la
+
+readhb_SOURCES = readhb.f
+
+readhb_nozeros_SOURCES = readhb_nozeros.f
+
+readhb_size_SOURCES = readhb_size.f
+
+umf4_SOURCES = umf4.c
+umf4_LDADD = $(top_builddir)/Source/libumfpack.la $(AMD_LIBS)
+
+umf4hb_SOURCES = umf4hb.f
+umf4hb_LDADD = libumf4_f77wrapper.la
+
+umf4zhb_SOURCES = umf4zhb.f
+umf4zhb_LDADD = libumf4_f77zwrapper.la
+
+umf4hb64_SOURCES = umf4hb64.f
+umf4hb64_LDADD = libumf4_f77wrapper64.la
+
+libumf4_f77wrapper_la_SOURCES = umf4_f77wrapper.c
+libumf4_f77wrapper_la_LIBADD = $(top_builddir)/Source/libumfpack.la
+libumf4_f77wrapper_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libumf4_f77zwrapper_la_SOURCES = umf4_f77zwrapper.c
+libumf4_f77zwrapper_la_LIBADD = $(top_builddir)/Source/libumfpack.la
+libumf4_f77zwrapper_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libumf4_f77wrapper64_la_SOURCES = umf4_f77wrapper.c
+libumf4_f77wrapper64_la_LIBADD = $(top_builddir)/Source/libumfpack.la
+libumf4_f77wrapper64_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libumf4_f77zwrapper64_la_SOURCES = umf4_f77zwrapper.c
+libumf4_f77zwrapper64_la_LIBADD = $(top_builddir)/Source/libumfpack.la
+libumf4_f77zwrapper64_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+
+check-local: $(SIMPLE) $(DEMO) $(DEMO:=.out) $(READHB) $(HB) $(UMF4) $(UMF4HB) $(UMF4HB:=.out)
+	./umfpack_simple
+	./umfpack_di_demo > my_umfpack_di_demo.out
+	-diff -u $(srcdir)/umfpack_di_demo.out my_umfpack_di_demo.out
+	./umfpack_dl_demo > my_umfpack_dl_demo.out
+	-diff -u $(srcdir)/umfpack_dl_demo.out my_umfpack_dl_demo.out
+	./umfpack_zi_demo > my_umfpack_zi_demo.out
+	-diff -u $(srcdir)/umfpack_zi_demo.out my_umfpack_zi_demo.out
+	./umfpack_zl_demo > my_umfpack_zl_demo.out
+	-diff -u $(srcdir)/umfpack_zl_demo.out my_umfpack_zl_demo.out
+	-$(MKDIR_P) tmp
+	-./readhb_nozeros < $(srcdir)/HB/can_24.psa > tmp/A
+	-./readhb_size    < $(srcdir)/HB/can_24.psa > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < $(srcdir)/HB/west0067.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/west0067.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < $(srcdir)/HB/fs_183_6.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/fs_183_6.rua > tmp/Asize
+	-./umf4
+	-./readhb         < $(srcdir)/HB/fs_183_6.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/fs_183_6.rua > tmp/Asize
+	-./umf4
+	-./readhb         < $(srcdir)/HB/arc130.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/arc130.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < $(srcdir)/HB/arc130.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/arc130.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < $(srcdir)/HB/arc130.rua > tmp/A
+	-./readhb_size    < $(srcdir)/HB/arc130.rua > tmp/Asize
+	-./umf4 a 1e-6
+	-./umf4hb < $(srcdir)/HB/west0067.rua > my_umf4hb.out
+	-diff -u $(srcdir)/umf4hb.out my_umf4hb.out
+	-./umf4zhb < $(srcdir)/HB/qc324.cua > my_umf4zhb.out
+	-diff -u $(srcdir)/umf4zhb.out my_umf4zhb.out
+	-./umf4hb64 < $(srcdir)/HB/west0067.rua > my_umf4hb64.out
+	-diff -u $(srcdir)/umf4hb64.out my_umf4hb64.out
+
+CLEANFILES = my_*.out *.umf tmp/* tmp
diff --git a/Doc/Makefile.am b/Doc/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Doc/Makefile.am
@@ -0,0 +1,101 @@
+EXTRA_DIST = \
+	ChangeLog \
+	License.txt \
+	gpl.txt
+
+dist_noinst_DATA = \
+	UMFPACK_QuickStart.tex \
+	UserGuide.bib \
+	UserGuide.sed1 \
+	UserGuide.sed2 \
+	UMFPACK_UserGuide.stex
+
+dist_pdf_DATA = \
+	UMFPACK_QuickStart.pdf \
+	UMFPACK_UserGuide.pdf
+
+# Unlike UserGuide.sed1, use \input{filename.tex} to insert the source code
+# which we will construct below.  Also remove the \begin{verbatim} and
+# \end{verbatim} on the adjacent lines and add them to filename.tex.
+define sed1 =
+sed -e ':more;$$!N;s/\n/&/2;t enough;$$!b more;:enough;/^\\begin{verbatim}\nINCLUDE umfpack\(.*\)\.\([ch]\) via sed\n\\end{verbatim}$$/s//\\input{\1_\2.tex}/;P;D' $< > $@
+endef
+
+# UserGuide.sed2 currently strips out C-style comments.  In some cases it
+# strips out too much due to formatting; we'll leave that for upstream to fix.
+define sed2 =
+echo '\begin{verbatim}' > $@
+sed -e '/[/][*]/d' -e '/[*][/]/d' < $< | expand -8 >> $@
+echo '\end{verbatim}' >> $@
+endef
+
+UMFPACK_UserGuide.tex: $(srcdir)/UMFPACK_UserGuide.stex
+	$(sed1)
+
+_simple_c.tex: $(top_srcdir)/Demo/umfpack_simple.c
+	$(sed2)
+%_h.tex: $(top_srcdir)/Include/umfpack%.h
+	$(sed2)
+
+SRC = \
+	_simple_c.tex \
+	_col_to_triplet_h.tex \
+	_defaults_h.tex \
+	_free_numeric_h.tex \
+	_free_symbolic_h.tex \
+	_get_determinant_h.tex \
+	_get_lunz_h.tex \
+	_get_numeric_h.tex \
+	_get_symbolic_h.tex \
+	_load_numeric_h.tex \
+	_load_symbolic_h.tex \
+	_numeric_h.tex \
+	_qsymbolic_h.tex \
+	_report_control_h.tex \
+	_report_info_h.tex \
+	_report_matrix_h.tex \
+	_report_numeric_h.tex \
+	_report_perm_h.tex \
+	_report_status_h.tex \
+	_report_symbolic_h.tex \
+	_report_triplet_h.tex \
+	_report_vector_h.tex \
+	_save_numeric_h.tex \
+	_save_symbolic_h.tex \
+	_scale_h.tex \
+	_solve_h.tex \
+	_symbolic_h.tex \
+	_tictoc_h.tex \
+	_timer_h.tex \
+	_transpose_h.tex \
+	_triplet_to_col_h.tex \
+	_wsolve_h.tex
+
+.INTERMEDIATE: UMFPACK_UserGuide.tex $(SRC)
+UMFPACK_UserGuide.tex: $(SRC)
+
+.INTERMEDIATE: UMFPACK_UserGuide.bib
+UMFPACK_UserGuide.bib: UserGuide.bib
+	$(LN_S) -f $< $@
+
+TEX = TEXINPUTS="$(srcdir):" pdflatex -interaction nonstopmode -file-line-error
+BIB = BIBINPUTS="$(srcdir):" bibtex
+%.pdf: %.tex %.bbl
+	$(TEX) $*
+	while grep -q "Rerun to get cross-references right" $*.log; do \
+		$(TEX) $*; \
+	done
+%.bbl: %.aux %.bib
+	$(BIB) $*
+%.aux: %.tex
+	$(TEX) $*
+
+# QuickStart does not include a bibliography, so the above rule won't work.
+UMFPACK_QuickStart.pdf: %.pdf: %.tex
+	$(TEX) $*
+	while grep -q "Rerun to get cross-references right" $*.log; do \
+		$(TEX) $*; \
+	done
+
+CLEANFILES = *.aux *.bbl *.blg *.log *.toc UMFPACK_UserGuide.tex
+MAINTAINERCLEANFILES = $(dist_pdf_DATA)
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1,34 @@
+pkginclude_HEADERS = \
+	umfpack.h \
+	umfpack_col_to_triplet.h \
+	umfpack_defaults.h \
+	umfpack_free_numeric.h \
+	umfpack_free_symbolic.h \
+	umfpack_get_determinant.h \
+	umfpack_get_lunz.h \
+	umfpack_get_numeric.h \
+	umfpack_get_symbolic.h \
+	umfpack_global.h \
+	umfpack_load_numeric.h \
+	umfpack_load_symbolic.h \
+	umfpack_numeric.h \
+	umfpack_qsymbolic.h \
+	umfpack_report_control.h \
+	umfpack_report_info.h \
+	umfpack_report_matrix.h \
+	umfpack_report_numeric.h \
+	umfpack_report_perm.h \
+	umfpack_report_status.h \
+	umfpack_report_symbolic.h \
+	umfpack_report_triplet.h \
+	umfpack_report_vector.h \
+	umfpack_save_numeric.h \
+	umfpack_save_symbolic.h \
+	umfpack_scale.h \
+	umfpack_solve.h \
+	umfpack_symbolic.h \
+	umfpack_tictoc.h \
+	umfpack_timer.h \
+	umfpack_transpose.h \
+	umfpack_triplet_to_col.h \
+	umfpack_wsolve.h
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,9 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = Include Source Demo Tcov Doc
+EXTRA_DIST = README.txt
+
+pkgconfig_DATA = umfpack.pc
+
+CODE_COVERAGE_BRANCH_COVERAGE = 1
+@CODE_COVERAGE_RULES@
diff --git a/Source/Makefile.am b/Source/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Source/Makefile.am
@@ -0,0 +1,323 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(CHOLMOD_CFLAGS) $(AMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS) $(CODE_COVERAGE_CPPFLAGS)
+AM_CFLAGS = $(CODE_COVERAGE_CFLAGS)
+
+if CODE_COVERAGE_ENABLED
+AM_CPPFLAGS += -DTESTING
+endif
+
+# non-user-callable umf_*.[ch] files:
+UMF = \
+	umf_assemble.c \
+	umf_blas3_update.c \
+	umf_build_tuples.c \
+	umf_create_element.c \
+	umf_dump.c \
+	umf_extend_front.c \
+	umf_garbage_collection.c \
+	umf_get_memory.c \
+	umf_grow_front.c \
+	umf_init_front.c \
+	umf_kernel.c \
+	umf_kernel_init.c \
+	umf_kernel_wrapup.c \
+	umf_local_search.c \
+	umf_lsolve.c \
+	umf_ltsolve.c \
+	umf_mem_alloc_element.c \
+	umf_mem_alloc_head_block.c \
+	umf_mem_alloc_tail_block.c \
+	umf_mem_free_tail_block.c \
+	umf_mem_init_memoryspace.c \
+	umf_report_vector.c \
+	umf_row_search.c \
+	umf_scale.c \
+	umf_scale_column.c \
+	umf_set_stats.c \
+	umf_solve.c \
+	umf_start_front.c \
+	umf_store_lu.c \
+	umf_symbolic_usage.c \
+	umf_transpose.c \
+	umf_triplet.c \
+	umf_tuple_lengths.c \
+	umf_usolve.c \
+	umf_utsolve.c \
+	umf_valid_numeric.c \
+	umf_valid_symbolic.c
+
+# non-user-callable umf_*.[ch] files
+# int/SuiteSparse_long versions only (no real/complex):
+UMFINT = \
+	umf_analyze.c \
+	umf_apply_order.c \
+	umf_cholmod.c \
+	umf_colamd.c \
+	umf_free.c \
+	umf_fsize.c \
+	umf_is_permutation.c \
+	umf_malloc.c \
+	umf_realloc.c \
+	umf_report_perm.c \
+	umf_singletons.c
+
+# user-callable umfpack_*.c files
+# (int/SuiteSparse_long and real/complex):
+UMFPACK = \
+	umfpack_col_to_triplet.c \
+	umfpack_defaults.c \
+	umfpack_free_numeric.c \
+	umfpack_free_symbolic.c \
+	umfpack_get_determinant.c \
+	umfpack_get_lunz.c \
+	umfpack_get_numeric.c \
+	umfpack_get_symbolic.c \
+	umfpack_load_numeric.c \
+	umfpack_load_symbolic.c \
+	umfpack_numeric.c \
+	umfpack_qsymbolic.c \
+	umfpack_report_control.c \
+	umfpack_report_info.c \
+	umfpack_report_matrix.c \
+	umfpack_report_numeric.c \
+	umfpack_report_perm.c \
+	umfpack_report_status.c \
+	umfpack_report_symbolic.c \
+	umfpack_report_triplet.c \
+	umfpack_report_vector.c \
+	umfpack_save_numeric.c \
+	umfpack_save_symbolic.c \
+	umfpack_scale.c \
+	umfpack_solve.c \
+	umfpack_symbolic.c \
+	umfpack_transpose.c \
+	umfpack_triplet_to_col.c
+
+# user-callable umfpack_*.c files
+# only one version for int/SuiteSparse_long, real/complex:
+GENERIC = \
+	umfpack_timer.c \
+	umfpack_tictoc.c \
+	umfpack_global.c
+
+noinst_HEADERS = \
+	cholmod_blas.h \
+	umf_config.h \
+	umf_internal.h \
+	umf_version.h \
+	$(UMF:.c=.h) \
+	$(UMFINT:.c=.h)
+
+noinst_LTLIBRARIES = \
+	libumf_i.la \
+	libumf_l.la \
+	libumf_di_hsolve.la \
+	libumf_di_triplet_map_x.la \
+	libumf_di_triplet_map_nox.la \
+	libumf_di_triplet_nomap_x.la \
+	libumf_di_assemble_fixq.la \
+	libumf_di_store_lu_drop.la \
+	libumf_di.la \
+	libumfpack_di_wsolve.la \
+	libumfpack_di.la \
+	libumf_dl_hsolve.la \
+	libumf_dl_triplet_map_x.la \
+	libumf_dl_triplet_map_nox.la \
+	libumf_dl_triplet_nomap_x.la \
+	libumf_dl_assemble_fixq.la \
+	libumf_dl_store_lu_drop.la \
+	libumf_dl.la \
+	libumfpack_dl_wsolve.la \
+	libumfpack_dl.la \
+	libumf_zi_hsolve.la \
+	libumf_zi_triplet_map_x.la \
+	libumf_zi_triplet_map_nox.la \
+	libumf_zi_triplet_nomap_x.la \
+	libumf_zi_assemble_fixq.la \
+	libumf_zi_store_lu_drop.la \
+	libumf_zi.la \
+	libumfpack_zi_wsolve.la \
+	libumfpack_zi.la \
+	libumf_zl_hsolve.la \
+	libumf_zl_triplet_map_x.la \
+	libumf_zl_triplet_map_nox.la \
+	libumf_zl_triplet_nomap_x.la \
+	libumf_zl_assemble_fixq.la \
+	libumf_zl_store_lu_drop.la \
+	libumf_zl.la \
+	libumfpack_zl_wsolve.la \
+	libumfpack_zl.la
+
+# compile each int and SuiteSparse_long routine (with no real/complex version)
+libumf_i_la_SOURCES = $(UMFINT)
+libumf_i_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+
+libumf_l_la_SOURCES = $(UMFINT)
+libumf_l_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+if CHOLMOD
+libumf_i_la_LIBADD = $(CHOLMOD_LIBS)
+libumf_l_la_LIBADD = $(CHOLMOD_LIBS)
+else
+libumf_i_la_CPPFLAGS += -DNCHOLMOD
+libumf_l_la_CPPFLAGS += -DNCHOLMOD
+endif
+
+# compile each routine in the DI version
+libumf_di_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_di_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DCONJUGATE_SOLVE
+
+libumf_di_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_di_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_MAP -DDO_VALUES
+
+libumf_di_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_di_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_MAP
+
+libumf_di_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_di_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_VALUES
+
+libumf_di_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_di_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DFIXQ
+
+libumf_di_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_di_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDROP
+
+libumf_di_la_SOURCES = $(UMF)
+libumf_di_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+libumf_di_la_LIBADD = \
+	libumf_di_hsolve.la \
+	libumf_di_triplet_map_x.la \
+	libumf_di_triplet_map_nox.la \
+	libumf_di_triplet_nomap_x.la \
+	libumf_di_assemble_fixq.la \
+	libumf_di_store_lu_drop.la
+
+libumfpack_di_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_di_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DWSOLVE
+
+libumfpack_di_la_SOURCES = $(UMFPACK)
+libumfpack_di_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+libumfpack_di_la_LIBADD = \
+	libumfpack_di_wsolve.la
+
+# compile each routine in the DL version
+libumf_dl_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_dl_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DCONJUGATE_SOLVE
+
+libumf_dl_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_MAP -DDO_VALUES
+
+libumf_dl_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_MAP
+
+libumf_dl_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_VALUES
+
+libumf_dl_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_dl_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DFIXQ
+
+libumf_dl_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_dl_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDROP
+
+libumf_dl_la_SOURCES = $(UMF)
+libumf_dl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+libumf_dl_la_LIBADD = \
+	libumf_dl_hsolve.la \
+	libumf_dl_triplet_map_x.la \
+	libumf_dl_triplet_map_nox.la \
+	libumf_dl_triplet_nomap_x.la \
+	libumf_dl_assemble_fixq.la \
+	libumf_dl_store_lu_drop.la
+
+libumfpack_dl_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_dl_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DWSOLVE
+
+libumfpack_dl_la_SOURCES = $(UMFPACK)
+libumfpack_dl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+libumfpack_dl_la_LIBADD = \
+	libumfpack_dl_wsolve.la
+
+# compile each routine in the ZI version
+libumf_zi_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_zi_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DCONJUGATE_SOLVE
+
+libumf_zi_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_MAP -DDO_VALUES
+
+libumf_zi_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_MAP
+
+libumf_zi_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_VALUES
+
+libumf_zi_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_zi_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DFIXQ
+
+libumf_zi_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_zi_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDROP
+
+libumf_zi_la_SOURCES = $(UMF)
+libumf_zi_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT
+libumf_zi_la_LIBADD = \
+	libumf_zi_hsolve.la \
+	libumf_zi_triplet_map_x.la \
+	libumf_zi_triplet_map_nox.la \
+	libumf_zi_triplet_nomap_x.la \
+	libumf_zi_assemble_fixq.la \
+	libumf_zi_store_lu_drop.la
+
+libumfpack_zi_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_zi_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DWSOLVE
+
+libumfpack_zi_la_SOURCES = $(UMFPACK)
+libumfpack_zi_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT
+libumfpack_zi_la_LIBADD = \
+	libumfpack_zi_wsolve.la
+
+# compile each routine in the ZL version
+libumf_zl_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_zl_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DCONJUGATE_SOLVE
+
+libumf_zl_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_MAP -DDO_VALUES
+
+libumf_zl_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_MAP
+
+libumf_zl_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_VALUES
+
+libumf_zl_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_zl_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DFIXQ
+
+libumf_zl_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_zl_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDROP
+
+libumf_zl_la_SOURCES = $(UMF)
+libumf_zl_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+libumf_zl_la_LIBADD = \
+	libumf_zl_hsolve.la \
+	libumf_zl_triplet_map_x.la \
+	libumf_zl_triplet_map_nox.la \
+	libumf_zl_triplet_nomap_x.la \
+	libumf_zl_assemble_fixq.la \
+	libumf_zl_store_lu_drop.la
+
+libumfpack_zl_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_zl_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DWSOLVE
+
+libumfpack_zl_la_SOURCES = $(UMFPACK)
+libumfpack_zl_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+libumfpack_zl_la_LIBADD = \
+	libumfpack_zl_wsolve.la
+
+lib_LTLIBRARIES = libumfpack.la
+libumfpack_la_SOURCES = $(GENERIC)
+libumfpack_la_LIBADD = \
+	libumf_i.la \
+	libumf_l.la \
+	libumf_di.la libumfpack_di.la \
+	libumf_dl.la libumfpack_dl.la \
+	libumf_zi.la libumfpack_zi.la \
+	libumf_zl.la libumfpack_zl.la \
+	$(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) $(BLAS_LIBS) -lm $(CODE_COVERAGE_LIBS)
+libumfpack_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
diff --git a/Tcov/Makefile.am b/Tcov/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Tcov/Makefile.am
@@ -0,0 +1,83 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include -I$(top_srcdir)/Source $(AMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	README.txt
+
+dist_noinst_DATA = \
+	badnum.umf \
+	badnum2.umf \
+	badsym.umf \
+	badsym2.umf \
+	TestMat/S_d2q06c \
+	TestMat/adlittle \
+	TestMat/arc130 \
+	TestMat/cage3 \
+	TestMat/d_dyn \
+	TestMat/galenet \
+	TestMat/matrix1 \
+	TestMat/matrix2 \
+	TestMat/matrix3 \
+	TestMat/matrix4 \
+	TestMat/matrix5 \
+	TestMat/matrix6 \
+	TestMat/matrix7 \
+	TestMat/matrix8 \
+	TestMat/matrix10 \
+	TestMat/matrix11 \
+	TestMat/matrix12 \
+	TestMat/matrix13 \
+	TestMat/matrix14 \
+	TestMat/matrix15 \
+	TestMat/matrix16 \
+	TestMat/matrix17 \
+	TestMat/matrix18 \
+	TestMat/matrix19 \
+	TestMat/matrix20 \
+	TestMat/matrix21 \
+	TestMat/matrix22 \
+	TestMat/matrix23 \
+	TestMat/matrix24 \
+	TestMat/matrix25 \
+	TestMat/matrix26 \
+	TestMat/matrix27 \
+	TestMat/matrix28 \
+	TestMat/matrix29 \
+	TestMat/matrix30 \
+	TestMat/nug07 \
+	TestMat/shl0
+
+if CODE_COVERAGE_ENABLED
+# TODO: Support the various flag combinations in the Make.# files.
+# Probably requires copying them to Source/Makefile.am and rebuilding all.
+AM_CPPFLAGS += -DTESTING
+
+check_PROGRAMS = \
+	ut_di \
+	ut_dl \
+	ut_zi \
+	ut_zl
+
+ut_di_SOURCES = ut.c
+ut_di_LDADD = $(top_builddir)/Source/libumfpack.la $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+ut_di_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+
+ut_dl_SOURCES = ut.c
+ut_dl_LDADD = $(top_builddir)/Source/libumfpack.la $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+ut_dl_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+ut_zi_SOURCES = ut.c
+ut_zi_LDADD = $(top_builddir)/Source/libumfpack.la $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+ut_zi_CPPFLAGS = $(AM_CPPFLAGS) -DZINT
+
+ut_zl_SOURCES = ut.c
+ut_zl_LDADD = $(top_builddir)/Source/libumfpack.la $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+ut_zl_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+
+check-local: $(check_PROGRAMS)
+	./ut_di > ut_di.out
+	./ut_dl > ut_dl.out
+	./ut_zi > ut_zi.out
+	./ut_zl > ut_zl.out
+endif
+
+CLEANFILES = A500 n.umf numeric.umf s.umf symbolic.umf debug.amd debug.umf *.out
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,117 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([UMFPACK],[5.7.9],[https://github.com/DrTimothyAldenDavis/SuiteSparse],[umfpack],[http://www.suitesparse.com/])
+AC_CONFIG_SRCDIR([Source/umfpack_solve.c])
+AC_CONFIG_AUX_DIR([build-aux])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([foreign])
+AM_SILENT_RULES([yes])
+LT_INIT([disable-static])
+
+# Checks for programs.
+PKG_PROG_PKG_CONFIG
+AC_PROG_INSTALL
+AC_PROG_CC
+AC_PROG_F77
+AX_CODE_COVERAGE
+
+AC_ARG_WITH([cholmod],
+	[AS_HELP_STRING(
+		[--without-cholmod],
+		[do not use CHOLMOD for ordering methods])],
+	[],
+	[AS_VAR_SET([with_cholmod], [yes])])
+
+AS_VAR_SET([LIBS_SAVED], [$LIBS])
+
+# Checks for libraries.
+AC_CHECK_LIB([m], [sqrt])
+
+AX_BLAS(
+	[],
+	[AC_MSG_ERROR([cannot find BLAS])])
+
+PKG_CHECK_MODULES([SUITESPARSECONFIG], [suitesparseconfig])
+PKG_CHECK_MODULES([AMD], [amd])
+AS_VAR_SET([UMFPACK_REQUIRES], ["suitesparseconfig amd"])
+
+AS_IF([test "x$with_cholmod" = "xyes"], [
+	PKG_CHECK_MODULES([CHOLMOD], [cholmod])
+	AS_VAR_APPEND([UMFPACK_REQUIRES], [" cholmod"])
+])
+
+# Checks for header files.
+AC_CHECK_HEADERS([float.h stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+
+# Checks for library functions.
+AC_FUNC_ERROR_AT_LINE
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([pow sqrt])
+
+AS_VAR_SET([LIBS], [$LIBS_SAVED])
+
+AC_MSG_CHECKING([whether to use CHOLMOD for ordering methods])
+AC_MSG_RESULT([$with_cholmod])
+AM_CONDITIONAL([CHOLMOD], [test "x$with_cholmod" = "xyes"])
+
+AC_SUBST([UMFPACK_REQUIRES])
+
+m4_ifdef([PKG_INSTALLDIR], [PKG_INSTALLDIR], [AC_SUBST([pkgconfigdir], [${libdir}/pkgconfig])])
+AC_CONFIG_FILES([
+	umfpack.pc
+	Makefile
+	Demo/Makefile
+	Doc/Makefile
+	Include/Makefile
+	Source/Makefile
+	Tcov/Makefile
+])
+AC_CONFIG_LINKS([Tcov/badnum.umf:Tcov/badnum.umf])
+AC_CONFIG_LINKS([Tcov/badnum2.umf:Tcov/badnum2.umf])
+AC_CONFIG_LINKS([Tcov/badsym.umf:Tcov/badsym.umf])
+AC_CONFIG_LINKS([Tcov/badsym2.umf:Tcov/badsym2.umf])
+#AC_CONFIG_LINKS([Tcov/TestMat:Tcov/TestMat])  # Can't link an entire directory?
+AC_CONFIG_LINKS([Tcov/TestMat/S_d2q06c:Tcov/TestMat/S_d2q06c])
+AC_CONFIG_LINKS([Tcov/TestMat/adlittle:Tcov/TestMat/adlittle])
+AC_CONFIG_LINKS([Tcov/TestMat/arc130:Tcov/TestMat/arc130])
+AC_CONFIG_LINKS([Tcov/TestMat/cage3:Tcov/TestMat/cage3])
+AC_CONFIG_LINKS([Tcov/TestMat/d_dyn:Tcov/TestMat/d_dyn])
+AC_CONFIG_LINKS([Tcov/TestMat/galenet:Tcov/TestMat/galenet])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix1:Tcov/TestMat/matrix1])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix2:Tcov/TestMat/matrix2])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix3:Tcov/TestMat/matrix3])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix4:Tcov/TestMat/matrix4])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix5:Tcov/TestMat/matrix5])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix6:Tcov/TestMat/matrix6])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix7:Tcov/TestMat/matrix7])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix8:Tcov/TestMat/matrix8])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix10:Tcov/TestMat/matrix10])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix11:Tcov/TestMat/matrix11])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix12:Tcov/TestMat/matrix12])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix13:Tcov/TestMat/matrix13])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix14:Tcov/TestMat/matrix14])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix15:Tcov/TestMat/matrix15])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix16:Tcov/TestMat/matrix16])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix17:Tcov/TestMat/matrix17])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix18:Tcov/TestMat/matrix18])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix19:Tcov/TestMat/matrix19])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix20:Tcov/TestMat/matrix20])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix21:Tcov/TestMat/matrix21])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix22:Tcov/TestMat/matrix22])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix23:Tcov/TestMat/matrix23])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix24:Tcov/TestMat/matrix24])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix25:Tcov/TestMat/matrix25])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix26:Tcov/TestMat/matrix26])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix27:Tcov/TestMat/matrix27])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix28:Tcov/TestMat/matrix28])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix29:Tcov/TestMat/matrix29])
+AC_CONFIG_LINKS([Tcov/TestMat/matrix30:Tcov/TestMat/matrix30])
+AC_CONFIG_LINKS([Tcov/TestMat/nug07:Tcov/TestMat/nug07])
+AC_CONFIG_LINKS([Tcov/TestMat/shl0:Tcov/TestMat/shl0])
+AC_OUTPUT
diff --git a/m4/ax_blas.m4 b/m4/ax_blas.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_blas.m4
@@ -0,0 +1,241 @@
+# ===========================================================================
+#         https://www.gnu.org/software/autoconf-archive/ax_blas.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_BLAS([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the BLAS linear-algebra
+#   interface (see http://www.netlib.org/blas/). On success, it sets the
+#   BLAS_LIBS output variable to hold the requisite library linkages.
+#
+#   To link with BLAS, you should link with:
+#
+#     $BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by AX_BLAS), and is
+#   sometimes necessary in order to link with F77 libraries. Users will also
+#   need to use AC_F77_DUMMY_MAIN (see the autoconf manual), for the same
+#   reason.
+#
+#   Many libraries are searched for, from ATLAS to CXML to ESSL. The user
+#   may also use --with-blas=<lib> in order to use some specific BLAS
+#   library <lib>. In order to link successfully, however, be aware that you
+#   will probably need to use the same Fortran compiler (which can be set
+#   via the F77 env. var.) as was used to compile the BLAS library.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a BLAS library is
+#   found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it is
+#   not found. If ACTION-IF-FOUND is not specified, the default action will
+#   define HAVE_BLAS.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>
+#   Copyright (c) 2019 Geoffrey M. Oxberry <goxberry@gmail.com>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <https://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 17
+
+AU_ALIAS([ACX_BLAS], [AX_BLAS])
+AC_DEFUN([AX_BLAS], [
+AC_PREREQ([2.55])
+AC_REQUIRE([AC_F77_LIBRARY_LDFLAGS])
+AC_REQUIRE([AC_CANONICAL_HOST])
+ax_blas_ok=no
+
+AC_ARG_WITH(blas,
+	[AS_HELP_STRING([--with-blas=<lib>], [use BLAS library <lib>])])
+case $with_blas in
+	yes | "") ;;
+	no) ax_blas_ok=disable ;;
+	-* | */* | *.a | *.so | *.so.* | *.dylib | *.dylib.* | *.o)
+		BLAS_LIBS="$with_blas"
+	;;
+	*) BLAS_LIBS="-l$with_blas" ;;
+esac
+
+# Get fortran linker names of BLAS functions to check for.
+AC_F77_FUNC(sgemm)
+AC_F77_FUNC(dgemm)
+
+ax_blas_save_LIBS="$LIBS"
+LIBS="$LIBS $FLIBS"
+
+# First, check BLAS_LIBS environment variable
+if test $ax_blas_ok = no; then
+if test "x$BLAS_LIBS" != x; then
+	save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+	AC_MSG_CHECKING([for $sgemm in $BLAS_LIBS])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes], [BLAS_LIBS=""])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+fi
+
+# BLAS linked to by default?  (happens on some supercomputers)
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="$LIBS"
+	AC_MSG_CHECKING([if $sgemm is being linked in already])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in OpenBLAS library? (http://xianyi.github.com/OpenBLAS/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(openblas, $sgemm, [ax_blas_ok=yes
+			                BLAS_LIBS="-lopenblas"])
+fi
+
+# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(atlas, ATL_xerbla,
+		[AC_CHECK_LIB(f77blas, $sgemm,
+		[AC_CHECK_LIB(cblas, cblas_dgemm,
+			[ax_blas_ok=yes
+			 BLAS_LIBS="-lcblas -lf77blas -latlas"],
+			[], [-lf77blas -latlas])],
+			[], [-latlas])])
+fi
+
+# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(dgemm, $dgemm,
+		[AC_CHECK_LIB(sgemm, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lsgemm -ldgemm -lblas"],
+			[], [-lblas])],
+			[], [-lblas])])
+fi
+
+# BLAS in Intel MKL library?
+if test $ax_blas_ok = no; then
+	# MKL for gfortran
+	if test x"$ac_cv_fc_compiler_gnu" = xyes; then
+		# 64 bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_gf_lp64, $sgemm,
+			[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+			[-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32 bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_gf, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_gf -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	# MKL for other compilers (Intel, PGI, ...?)
+	else
+		# 64-bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_intel_lp64, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32-bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_intel, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	fi
+fi
+# Old versions of MKL
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(mkl, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lmkl -lguide -lpthread"],,[-lguide -lpthread])
+fi
+
+# BLAS in Apple vecLib library?
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="-framework vecLib $LIBS"
+	AC_MSG_CHECKING([for $sgemm in -framework vecLib])
+	AC_LINK_IFELSE([AC_LANG_CALL([], [$sgemm])], [ax_blas_ok=yes;BLAS_LIBS="-framework vecLib"])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in Alpha CXML library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(cxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lcxml"])
+fi
+
+# BLAS in Alpha DXML library? (now called CXML, see above)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(dxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-ldxml"])
+fi
+
+# BLAS in Sun Performance library?
+if test $ax_blas_ok = no; then
+	if test "x$GCC" != xyes; then # only works with Sun CC
+		AC_CHECK_LIB(sunmath, acosp,
+			[AC_CHECK_LIB(sunperf, $sgemm,
+				[BLAS_LIBS="-xlic_lib=sunperf -lsunmath"
+                                 ax_blas_ok=yes],[],[-lsunmath])])
+	fi
+fi
+
+# BLAS in SCSL library?  (SGI/Cray Scientific Library)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(scs, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lscs"])
+fi
+
+# BLAS in SGIMATH library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(complib.sgimath, $sgemm,
+		     [ax_blas_ok=yes; BLAS_LIBS="-lcomplib.sgimath"])
+fi
+
+# BLAS in IBM ESSL library? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(essl, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lessl -lblas"],
+			[], [-lblas $FLIBS])])
+fi
+
+# Generic BLAS library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lblas"])
+fi
+
+AC_SUBST(BLAS_LIBS)
+
+LIBS="$ax_blas_save_LIBS"
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_blas_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])
+        :
+else
+        ax_blas_ok=no
+        $2
+fi
+])dnl AX_BLAS
diff --git a/m4/ax_code_coverage.m4 b/m4/ax_code_coverage.m4
new file mode 100644
--- /dev/null
+++ b/m4/ax_code_coverage.m4
@@ -0,0 +1,271 @@
+# ===========================================================================
+#     https://www.gnu.org/software/autoconf-archive/ax_code_coverage.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_CODE_COVERAGE()
+#
+# DESCRIPTION
+#
+#   Defines CODE_COVERAGE_CPPFLAGS, CODE_COVERAGE_CFLAGS,
+#   CODE_COVERAGE_CXXFLAGS and CODE_COVERAGE_LIBS which should be included
+#   in the CPPFLAGS, CFLAGS CXXFLAGS and LIBS/LIBADD variables of every
+#   build target (program or library) which should be built with code
+#   coverage support. Also defines CODE_COVERAGE_RULES which should be
+#   substituted in your Makefile; and $enable_code_coverage which can be
+#   used in subsequent configure output. CODE_COVERAGE_ENABLED is defined
+#   and substituted, and corresponds to the value of the
+#   --enable-code-coverage option, which defaults to being disabled.
+#
+#   Test also for gcov program and create GCOV variable that could be
+#   substituted.
+#
+#   Note that all optimization flags in CFLAGS must be disabled when code
+#   coverage is enabled.
+#
+#   Usage example:
+#
+#   configure.ac:
+#
+#     AX_CODE_COVERAGE
+#
+#   Makefile.am:
+#
+#     @CODE_COVERAGE_RULES@
+#     my_program_LIBS = ... $(CODE_COVERAGE_LIBS) ...
+#     my_program_CPPFLAGS = ... $(CODE_COVERAGE_CPPFLAGS) ...
+#     my_program_CFLAGS = ... $(CODE_COVERAGE_CFLAGS) ...
+#     my_program_CXXFLAGS = ... $(CODE_COVERAGE_CXXFLAGS) ...
+#
+#   This results in a "check-code-coverage" rule being added to any
+#   Makefile.am which includes "@CODE_COVERAGE_RULES@" (assuming the module
+#   has been configured with --enable-code-coverage). Running `make
+#   check-code-coverage` in that directory will run the module's test suite
+#   (`make check`) and build a code coverage report detailing the code which
+#   was touched, then print the URI for the report.
+#
+#   In earlier versions of this macro, CODE_COVERAGE_LDFLAGS was defined
+#   instead of CODE_COVERAGE_LIBS. They are both still defined, but use of
+#   CODE_COVERAGE_LIBS is preferred for clarity; CODE_COVERAGE_LDFLAGS is
+#   deprecated. They have the same value.
+#
+#   This code was derived from Makefile.decl in GLib, originally licenced
+#   under LGPLv2.1+.
+#
+# LICENSE
+#
+#   Copyright (c) 2012, 2016 Philip Withnall
+#   Copyright (c) 2012 Xan Lopez
+#   Copyright (c) 2012 Christian Persch
+#   Copyright (c) 2012 Paolo Borelli
+#   Copyright (c) 2012 Dan Winship
+#   Copyright (c) 2015 Bastien ROUCARIES
+#
+#   This library is free software; you can redistribute it and/or modify it
+#   under the terms of the GNU Lesser General Public License as published by
+#   the Free Software Foundation; either version 2.1 of the License, or (at
+#   your option) any later version.
+#
+#   This library is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
+#   General Public License for more details.
+#
+#   You should have received a copy of the GNU Lesser General Public License
+#   along with this program. If not, see <https://www.gnu.org/licenses/>.
+
+#serial 27
+
+AC_DEFUN([_AX_CODE_COVERAGE_ENABLED],[
+	# check for gcov
+	AC_CHECK_TOOL([GCOV],
+		  [$_AX_CODE_COVERAGE_GCOV_PROG_WITH],
+		  [:])
+	AS_IF([test "X$GCOV" = "X:"],
+	      [AC_MSG_ERROR([gcov is needed to do coverage])])
+	AC_SUBST([GCOV])
+
+	dnl Check if gcc is being used
+	AS_IF([ test "$GCC" = "no" ], [
+		AC_MSG_ERROR([not compiling with gcc, which is required for gcov code coverage])
+	      ])
+
+	AC_CHECK_PROG([LCOV], [lcov], [lcov])
+	AC_CHECK_PROG([GENHTML], [genhtml], [genhtml])
+
+	AS_IF([ test x"$LCOV" = x ], [
+		AC_MSG_ERROR([To enable code coverage reporting you must have lcov installed])
+	      ])
+
+	AS_IF([ test x"$GENHTML" = x ], [
+		AC_MSG_ERROR([Could not find genhtml from the lcov package])
+	])
+
+	dnl Build the code coverage flags
+	dnl Define CODE_COVERAGE_LDFLAGS for backwards compatibility
+	CODE_COVERAGE_CPPFLAGS="-DNDEBUG"
+	CODE_COVERAGE_CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_CXXFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
+	CODE_COVERAGE_LIBS="-lgcov"
+	CODE_COVERAGE_LDFLAGS="$CODE_COVERAGE_LIBS"
+
+	AC_SUBST([CODE_COVERAGE_CPPFLAGS])
+	AC_SUBST([CODE_COVERAGE_CFLAGS])
+	AC_SUBST([CODE_COVERAGE_CXXFLAGS])
+	AC_SUBST([CODE_COVERAGE_LIBS])
+	AC_SUBST([CODE_COVERAGE_LDFLAGS])
+
+	[CODE_COVERAGE_RULES_CHECK='
+	-$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) -k check
+	$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) code-coverage-capture
+']
+		[CODE_COVERAGE_RULES_CAPTURE='
+	$(code_coverage_v_lcov_cap)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --capture --output-file "$(CODE_COVERAGE_OUTPUT_FILE).tmp" --test-name "$(call code_coverage_sanitize,$(PACKAGE_NAME)-$(PACKAGE_VERSION))" --no-checksum --compat-libtool $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_OPTIONS)
+	$(code_coverage_v_lcov_ign)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --remove "$(CODE_COVERAGE_OUTPUT_FILE).tmp" "/tmp/*" $(CODE_COVERAGE_IGNORE_PATTERN) --output-file "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_RMOPTS)
+	-@rm -f $(CODE_COVERAGE_OUTPUT_FILE).tmp
+	$(code_coverage_v_genhtml)LANG=C $(GENHTML) $(code_coverage_quiet) $(addprefix --prefix ,$(CODE_COVERAGE_DIRECTORY)) --output-directory "$(CODE_COVERAGE_OUTPUT_DIRECTORY)" --title "$(PACKAGE_NAME)-$(PACKAGE_VERSION) Code Coverage" --legend --show-details "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_GENHTML_OPTIONS)
+	@echo "file://$(abs_builddir)/$(CODE_COVERAGE_OUTPUT_DIRECTORY)/index.html"
+']
+		[CODE_COVERAGE_RULES_CLEAN='
+clean: code-coverage-clean
+distclean: code-coverage-clean
+code-coverage-clean:
+	-$(LCOV) --directory $(top_builddir) -z
+	-rm -rf $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_FILE).tmp $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+	-find . \( -name "*.gcda" -o -name "*.gcno" -o -name "*.gcov" \) -delete
+']
+])
+
+AC_DEFUN([_AX_CODE_COVERAGE_DISABLED],[
+   [CODE_COVERAGE_RULES_CHECK='
+	@echo "Need to reconfigure with --enable-code-coverage"
+   ']
+   CODE_COVERAGE_RULES_CAPTURE="$CODE_COVERAGE_RULES_CHECK"
+   CODE_COVERAGE_RULES_CLEAN=''
+])
+
+AC_DEFUN([AX_CODE_COVERAGE],[
+	dnl Check for --enable-code-coverage
+
+	# allow to override gcov location
+	AC_ARG_WITH([gcov],
+	  [AS_HELP_STRING([--with-gcov[=GCOV]], [use given GCOV for coverage (GCOV=gcov).])],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=$with_gcov],
+	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=gcov])
+
+	AC_MSG_CHECKING([whether to build with code coverage support])
+	AC_ARG_ENABLE([code-coverage],
+	  AS_HELP_STRING([--enable-code-coverage],
+	  [Whether to enable code coverage support]),,
+	  enable_code_coverage=no)
+
+	AM_CONDITIONAL([CODE_COVERAGE_ENABLED], [test "x$enable_code_coverage" = xyes])
+	AC_SUBST([CODE_COVERAGE_ENABLED], [$enable_code_coverage])
+	AC_MSG_RESULT($enable_code_coverage)
+
+	AS_IF([ test "x$enable_code_coverage" = xyes ], [
+		_AX_CODE_COVERAGE_ENABLED
+	      ], [
+		_AX_CODE_COVERAGE_DISABLED
+	])
+
+[CODE_COVERAGE_RULES='
+# Code coverage
+#
+# Optional:
+#  - CODE_COVERAGE_DIRECTORY: Top-level directory for code coverage reporting.
+#    Multiple directories may be specified, separated by whitespace.
+#    (Default: $(top_builddir))
+#  - CODE_COVERAGE_OUTPUT_FILE: Filename and path for the .info file generated
+#    by lcov for code coverage. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info)
+#  - CODE_COVERAGE_OUTPUT_DIRECTORY: Directory for generated code coverage
+#    reports to be created. (Default:
+#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage)
+#  - CODE_COVERAGE_BRANCH_COVERAGE: Set to 1 to enforce branch coverage,
+#    set to 0 to disable it and leave empty to stay with the default.
+#    (Default: empty)
+#  - CODE_COVERAGE_LCOV_SHOPTS_DEFAULT: Extra options shared between both lcov
+#    instances. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_LCOV_SHOPTS: Extra options to shared between both lcov
+#    instances. (Default: $CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH: --gcov-tool pathtogcov
+#  - CODE_COVERAGE_LCOV_OPTIONS_DEFAULT: Extra options to pass to the
+#    collecting lcov instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+#  - CODE_COVERAGE_LCOV_OPTIONS: Extra options to pass to the collecting lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_LCOV_RMOPTS_DEFAULT: Extra options to pass to the filtering
+#    lcov instance. (Default: empty)
+#  - CODE_COVERAGE_LCOV_RMOPTS: Extra options to pass to the filtering lcov
+#    instance. (Default: $CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+#  - CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT: Extra options to pass to the
+#    genhtml instance. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
+#  - CODE_COVERAGE_GENHTML_OPTIONS: Extra options to pass to the genhtml
+#    instance. (Default: $CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore
+#
+# The generated report will be titled using the $(PACKAGE_NAME) and
+# $(PACKAGE_VERSION). In order to add the current git hash to the title,
+# use the git-version-gen script, available online.
+
+# Optional variables
+CODE_COVERAGE_DIRECTORY ?= $(top_builddir)
+CODE_COVERAGE_OUTPUT_FILE ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info
+CODE_COVERAGE_OUTPUT_DIRECTORY ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage
+CODE_COVERAGE_BRANCH_COVERAGE ?=
+CODE_COVERAGE_LCOV_SHOPTS_DEFAULT ?= $(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc lcov_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_LCOV_SHOPTS ?= $(CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
+CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH ?= --gcov-tool "$(GCOV)"
+CODE_COVERAGE_LCOV_OPTIONS_DEFAULT ?= $(CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
+CODE_COVERAGE_LCOV_OPTIONS ?= $(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
+CODE_COVERAGE_LCOV_RMOPTS_DEFAULT ?=
+CODE_COVERAGE_LCOV_RMOPTS ?= $(CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
+CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT ?=\
+$(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
+--rc genhtml_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
+CODE_COVERAGE_GENHTML_OPTIONS ?= $(CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
+CODE_COVERAGE_IGNORE_PATTERN ?=
+
+GITIGNOREFILES ?=
+GITIGNOREFILES += $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_DIRECTORY)
+
+code_coverage_v_lcov_cap = $(code_coverage_v_lcov_cap_$(V))
+code_coverage_v_lcov_cap_ = $(code_coverage_v_lcov_cap_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_cap_0 = @echo "  LCOV   --capture"\
+ $(CODE_COVERAGE_OUTPUT_FILE);
+code_coverage_v_lcov_ign = $(code_coverage_v_lcov_ign_$(V))
+code_coverage_v_lcov_ign_ = $(code_coverage_v_lcov_ign_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_lcov_ign_0 = @echo "  LCOV   --remove /tmp/*"\
+ $(CODE_COVERAGE_IGNORE_PATTERN);
+code_coverage_v_genhtml = $(code_coverage_v_genhtml_$(V))
+code_coverage_v_genhtml_ = $(code_coverage_v_genhtml_$(AM_DEFAULT_VERBOSITY))
+code_coverage_v_genhtml_0 = @echo "  GEN   " $(CODE_COVERAGE_OUTPUT_DIRECTORY);
+code_coverage_quiet = $(code_coverage_quiet_$(V))
+code_coverage_quiet_ = $(code_coverage_quiet_$(AM_DEFAULT_VERBOSITY))
+code_coverage_quiet_0 = --quiet
+
+# sanitizes the test-name: replaces with underscores: dashes and dots
+code_coverage_sanitize = $(subst -,_,$(subst .,_,$(1)))
+
+# Use recursive makes in order to ignore errors during check
+check-code-coverage:'"$CODE_COVERAGE_RULES_CHECK"'
+
+# Capture code coverage data
+code-coverage-capture: code-coverage-capture-hook'"$CODE_COVERAGE_RULES_CAPTURE"'
+
+# Hook rule executed before code-coverage-capture, overridable by the user
+code-coverage-capture-hook:
+
+'"$CODE_COVERAGE_RULES_CLEAN"'
+
+A''M_DISTCHECK_CONFIGURE_FLAGS ?=
+A''M_DISTCHECK_CONFIGURE_FLAGS += --disable-code-coverage
+
+.PHONY: check-code-coverage code-coverage-capture code-coverage-capture-hook code-coverage-clean
+']
+
+	AC_SUBST([CODE_COVERAGE_RULES])
+	m4_ifdef([_AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE([CODE_COVERAGE_RULES])])
+])
diff --git a/umfpack.pc.in b/umfpack.pc.in
new file mode 100644
--- /dev/null
+++ b/umfpack.pc.in
@@ -0,0 +1,13 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Sparse multifrontal LU factorization
+Version: @PACKAGE_VERSION@
+URL: @PACKAGE_URL@
+Requires.private: @UMFPACK_REQUIRES@
+Libs: -L${libdir} -lumfpack
+Libs.private: @BLAS_LIBS@ -lm
+Cflags: -I${includedir}/umfpack
