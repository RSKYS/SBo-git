.\" Man page generated from reStructuredText.
.
.TH MKTOC 1 "2018-01-11" "1.3" "SlackBuilds.org"
.SH NAME
mktoc \- create TOC files for audio CDs
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" RST source for mktoc(1) man page. Convert with:
.
.\" rst2man.py mktoc.rst > mktoc.1
.
.\" rst2man.py comes from the SBo development/docutils package.
.
.\" Upstream's README is already RST, I just added some stuff to make
.
.\" it format in man page style.
.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc [OPTIONS] < CUE_FILE
mktoc [OPTIONS] [[\-f] CUE_FILE] [[\-o] TOC_FILE]
mktoc [OPTIONS] \-w WAV_FILES [[\-o] TOC_FILE]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.\" Mktoc // (c) 2011, Patrick C. McGinty
.
.\" mktoc[@]tuxcoder[dot]com
.
.sp
Mktoc simplifies the steps needed to create audio CD TOC files for the
cdrdao CD burning program. For users familiar with ExactAudioCopy or CdrWin,
TOC files are synonymous with CUE sheets. The primary goal of mktoc is to
create TOC files using a previously generated CUE sheet.
.SH FEATURES
.INDENT 0.0
.IP \(bu 2
Create a TOC file from a list of WAV files.
.IP \(bu 2
Convert an ExactAudioCopy (EAC) CUE file to the TOC format that
is usable by cdrdao.
.IP \(bu 2
Multi\-session aware CUE parsing, necessary for making CDDB and
AccurateRip matchable discs.
.IP \(bu 2
Non\-compliant CUE sheet support.
.IP \(bu 2
Support for various pregap methods.
.IP \(bu 2
Can create offset corrected WAV files for true \(aqbit\-for\-bit\(aq
accurate copies.
.IP \(bu 2
Fuzzy file name logic can correct common file name spelling
variations.
.IP \(bu 2
Workaround known TOC file parsing bugs in cdrdao.
.UNINDENT
.SH USAGE
.sp
\fBCUE_FILE\fP must contain a valid CUE format. When \fB*_FILE\fP is not
provided, the program will read from \fBSTDIN\fP\&. All output will be sent to
\fBSTDOUT\fP\&.
.sp
All attempts will be made to preserve any and all information from the input
file. For any case where the CUE file contains unknown or bad values, the
user will be notified on \fBSTDERR\fP\&.
.SH OPTIONS
.INDENT 0.0
.TP
.B \-\-version
show program\(aqs version number and exit
.TP
.B \-h
show help message and exit
.TP
.B \-\-help
show detailed usage instructions and exit
.TP
.B \-a\fP,\fB  \-\-allow\-missing\-wav
do not abort when WAV file(s) are missing, (experts only). It is possible
when using this option that a bug in cdrdao will create a CD that ignores
the pregap definitions in the TOC file.  Only use this option if the CUE
file does not contain pregaps, or if you do not wish to retain the pregap
information.
.TP
.BI \-c \ <WAV_OFFSET>\fP,\fB \ \-\-offset\-correction\fB= <WAV_OFFSET>
correct reader/writer offset by creating WAV file(s) shifted by
WAV_OFFSET samples (original data is not modified)
.TP
.B \-d\fP,\fB  \-\-debug
enable debugging statements
.TP
.BI \-f \ <CUE_FILE>\fP,\fB \ \-\-file\fB= <CUE_FILE>
specify the input CUE file to read
.TP
.B \-m\fP,\fB  \-\-multi
for safety, this option must be set when creating a mulit\-session TOC
file
.TP
.BI \-o \ <TOC_FILE>\fP,\fB \ \-\-output\fB= <TOC_FILE>
specify the output TOC file to write
.TP
.B \-t\fP,\fB  \-\-use\-temp
write offset corrected WAV files to /tmp directory
.TP
.B \-w\fP,\fB  \-\-wave
write a TOC file using list of WAV files
.TP
.B \-z\fP,\fB  \-\-no\-multi
disable multi\-session support; program assumes TOC will be written in
single\-session mode
.UNINDENT
.SH EXAMPLES
.INDENT 0.0
.IP 1. 3
Create a TOC file from a set of WAV files:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc \-w *.wav
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 2. 3
Write a TOC file to \fBtoc_file.toc\fP, from a set of WAV files:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc \-w *.wav toc_file.toc
mktoc \-w *.wav > toc_file.toc
mktoc \-w *.wav \-o toc_file.toc
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 3. 3
Create a TOC file from a valid CUE file:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc cue_file.cue
mktoc < cue_file.cue
mktoc \-f cue_file.cue
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 4. 3
Write a TOC file to \fBtoc_file.toc\fP, given an input CUE file:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc cue_file.cue toc_file.toc
mktoc < cue_file.cue > toc_file.toc
mktoc \-f cue_file.cue \-o toc_file.toc
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 5. 3
Tell mktoc to ignore missing WAV file errors. There is a potential that
the result TOC file will cause cdrdao to lose pregap information during
the burn process (see above):
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc \-a cue_file.cue
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 6. 3
Adjust WAV files for a CD writer offset value. For example, if your CD
writer has a \-30 sample write offset, it can be corrected by offsetting
the input WAV files by +30 samples. New WAV files will be placed in the
working directory in a new dir called \fBwav+30\fP:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc \-c 30 < cue_file.cue
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 7. 3
Adjust WAV files for a CD writer offset value, but create new files in
the \fB/tmp\fP directory:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
mktoc \-c 30 \-t < cue_file.cue
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SH CONTACT
.SS E\-mail
.nf
mktoc[@]tuxcoder[dot]com
.fi
.sp
.SS Info
.nf
\fI\%http://packages.python.org/mktoc/\fP
\fI\%https://github.com/cmcginty/mktoc\fP
\fI\%http://blog.tuxcoder.com\fP
.fi
.sp
.\" Generated by docutils manpage writer.
.
