--- a/third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen/proxygen/lib/services/WorkerThread.cpp	2022-06-16 13:33:00.766000000 +0200
+++ b/third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen/proxygen/lib/services/WorkerThread.cpp	2022-06-16 13:37:39.111000000 +0200
@@ -17,7 +17,7 @@
 #include <glog/logging.h>
 #include <signal.h>
 
-#if !FOLLY_MOBILE && __has_include(<liburing.h>)
+#if !FOLLY_MOBILE && false
 
 DEFINE_int32(pwt_io_uring_capacity, -1, "io_uring backend capacity");
 DEFINE_int32(pwt_io_uring_max_submit, 128, "io_uring backend max submit");
--- a/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/experimental/io/IoUringBackend.h	2022-06-16 13:38:45.523000000 +0200
+++ b/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/experimental/io/IoUringBackend.h	2022-06-16 13:43:08.748000000 +0200
@@ -40,11 +40,7 @@
 #include <poll.h>
 #endif
 
-#if __has_include(<liburing.h>)
-#include <liburing.h>
-#endif
-
-#if __has_include(<liburing.h>)
+#if false
 
 namespace folly {
 
--- a/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/lang/Badge.h	2022-06-16 13:38:45.611000000 +0200
+++ b/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/lang/Badge.h	2022-06-16 13:45:32.863000000 +0200
@@ -92,10 +92,7 @@
       typename = std::enable_if_t<folly::IsOneOf<Holder, Holders...>::value>>
   /* implicit */ constexpr any_badge(badge<Holder>) noexcept {}
 
-  template <
-      typename... OtherHolders,
-      typename = std::enable_if_t<folly::StrictConjunction<
-          folly::IsOneOf<OtherHolders, Holders...>...>::value>>
+  template <typename... OtherHolders>
   /* implicit */ constexpr any_badge(any_badge<OtherHolders...>) noexcept {}
 };
 
--- a/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/experimental/io/IoUringBackend.cpp	2022-06-16 14:12:06.191000000 +0200
+++ b/third-party/folly/bundled_folly-prefix/src/bundled_folly/folly/experimental/io/IoUringBackend.cpp	2022-06-16 14:09:28.887000000 +0200
@@ -31,7 +31,7 @@
 #include <sys/timerfd.h>
 #endif
 
-#if __has_include(<liburing.h>)
+#if false
 
 extern "C" FOLLY_ATTR_WEAK void eb_poll_loop_pre_hook(uint64_t* call_time);
 extern "C" FOLLY_ATTR_WEAK void eb_poll_loop_post_hook(
--- a/third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen/proxygen/lib/stats/PeriodicStats.h	2022-06-16 14:28:37.919000000 +0200
+++ b/third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen/proxygen/lib/stats/PeriodicStats.h	2022-06-16 14:24:03.920000000 +0200
@@ -163,7 +163,7 @@
   void modifyData(T* newData, bool sync = false) {
     auto* oldData = data_.exchange(newData);
     if (sync) {
-      folly::synchronize_rcu();
+      folly::rcu_synchronize();
       delete oldData;
     } else {
       folly::rcu_retire(oldData);
--- a/third-party/zstd/CMakeLists.txt	2022-06-18 17:24:56.022000000 +0200
+++ a/third-party/zstd/CMakeLists.txt	2022-06-18 17:26:10.462000000 +0200
@@ -2,8 +2,7 @@
 
 option(FORCE_BUNDLED_ZSTD "Always build zstd, instead of using the system version" OFF)
 if (NOT FORCE_BUNDLED_ZSTD)
-  set(CAN_USE_SYSTEM_ZSTD OFF)
-  find_library(ZSTD_LIB NAMES zstd)
+  find_library(ZSTD_LIB NAMES zstd libzstd)
   find_path(ZSTD_INCLUDE_DIR NAMES zstd.h)
   set(CMAKE_REQUIRED_INCLUDES "${ZSTD_INCLUDE_DIR}")
   check_cxx_source_compiles("
