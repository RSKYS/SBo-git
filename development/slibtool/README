slibtool is an independent reimplementation of the widely used libtool,
written in C. slibtool is designed to be a clean, fast, easy-to-use.
slibtool maintains compatibility with libtool in nearly every aspect
of the tool's functionality as well as semantics, leaving out (or
turning into a no-op) only a small number of features that are no
longer needed on modern systems.

This does not conflict with GNU libtool included with Slackware.

To use slibtool instead of libtool export this to your environment.
  export MAKEFLAGS='LIBTOOL=rlibtool'

This symlink should work in most cases by parsing the generated
libtool to determine if shared libraries and / or static archives
will be built.

To force building both shared libraries and static archives:
  export MAKEFLAGS='LIBTOOL=slibtool'
or you can build only shared libraries:
  export MAKEFLAGS='LIBTOOL=slibtool-shared'
or only static archives:
  export MAKEFLAGS='LIBTOOL=slibtool-static'

slibtool may build packages that are not compatible with GNU libtool.
For compatibility, use rclibtool instead of rlibtool:
  export MAKEFLAGS='LIBTOOL=rclibtool'
or, for both shared libararies and static archives:
  export MAKEFLAGS='LIBTOOL=clibtool'
or, for only shared libraries:
  export MAKEFLAGS='LIBTOOL=clibtool-shared'
or, for only static archives:
  export MAKEFLAGS='LIBTOOL=clibtool-static'

If a build with libtool fails because of missing libtool library files
(.la), the package with the missing files can be rebuilt with rclibtool
or clibtool as above.

To use slibtool in a more verbose debug mode:
  export MAKEFLAGS='LIBTOOL=rdlibtool'
or, for compatibility and a more verbose debug mode:
  export MAKEFLAGS='LIBTOOL=rdclibtool'
or, for both shared libraries and static archives:
  export MAKEFLAGS='LIBTOOL=dlibtool'
or, for only shared libraries:
  export MAKEFLAGS='LIBTOOL=dlibtool-shared'
or, for only static archives:
  export MAKEFLAGS='LIBTOOL=dlibtool-static'

If the generated libtool is not found when using rlibtool, rclibtool,
rdlibtool or rdclibtool this will result in a build error and they
should not be used in those cases.

To build debugging symbols use:
  DEBUG=1 ./slibtool.SlackBuild
