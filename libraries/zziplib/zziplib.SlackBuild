#!/bin/bash

# Slackware build script for zziplib

# Copyright 2012-2020 Larry Hajali <email removed>
# Copyright 2024 B. Watson <urchlay@slackware.uk>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# 20240909 bkw: BUILD=2, generate doinst.sh for mandb.
# 20240823 bkw: update for v0.13.78.
# 20240808 bkw: update for v0.13.77.
# 20240314 bkw: update for v0.13.74.
# 20230604 bkw:
# - new maintainer.
# - update for v0.13.72.
# - switch to cmake.
# - make slack-desc more concise.

# Note: 0.13.71 had the file "usr/lib64/pkgconfig/zzip-zlib-config.pc",
# and 0.13.72 doesn't have it. Dependees are alephone and milkytracker [*].
# These build correctly without this .pc file. If anyone has issues
# with new builds because of this, please contact me.
# [*] desmume had zziplib listed in REQUIRES, but it doesn't actually
# use it (maybe it did at one time?).

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=zziplib
VERSION=${VERSION:-0.13.78}
BUILD=${BUILD:-2}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
chown -R root:root .
find -L .  -perm /111 -a \! -perm 755 -a -exec chmod 755 {} + -o \
        \! -perm /111 -a \! -perm 644 -a -exec chmod 644 {} +

# 20230604 bkw: switch to cmake, because upstream is phasing out
# autotools builds. the next zziplib release probably won't support
# autotools at all.

# -DZZIPTEST=OFF prevents cmake from doing network access, and makes
# no difference in the package.

mkdir -p build
cd build
  cmake \
    -DZZIPTEST=OFF \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_BUILD_TYPE=Release ..
  make
  make install/strip DESTDIR=$PKG
cd ..

gzip -9 $PKG/usr/man/man*/*

PKGDOC=$PKG/usr/doc/$PRGNAM-$VERSION
mkdir -p $PKGDOC
cp -a ChangeLog COPYING* README* TODO $PKGDOC
cat $CWD/$PRGNAM.SlackBuild > $PKGDOC/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG

# 20240909 bkw: This bit may get added to the SBo templates, so I'll
# comment it in excruciating detail.
#
# The idea is that, immediately after installing the package, the
# "man -k", "whatis", "apropos" commands should be able to find the
# newly-installed man pages. This means that, at package install time,
# they have to be added to the man database with the mandb command.
#
# We *could* run "mandb -c" in the doinst.sh, which would rebuild the
# whole cache, but it takes a long time to do in Slackware 15.0 (several
# minutes). Running "mandb" without the -c is much quicker, but
# doesn't always pick up the new man pages (see next paragraph). So
# instead, we have to add them one-by-one with "mandb -f" commands.
#
# In theory, we could run mandb with arguments in doinst.sh, or just
# rely /etc/cron.daily/man-db to pick up the new man pages every
# day... but in practice, it fails to pick up new ones, if the
# timestamp on /usr/man/man1 (man3, etc) is older than the mandb
# database file. This happens if we install or reinstall a package
# that was built yesterday or earlier, if it contains any man pages.
#
# Note that I'm *not* proposing removing the man pages from the
# database on package removal. It could be done with a simple "mandb"
# command in doinst.sh (takes ~10 seconds to run with an SSD, longer
# with a platter drive), but the daily cron job already handles this
# correctly, regardless of the timestamps on the man page dirs. So
# when you remove a package, you'll have to live with its man pages
# being in the database for up to 24 more hours. This is no worse
# than its files still being listed in the locate database, and nobody
# complains about that.

find usr/man -type f -a -name '*.gz' | \
  sed -e 's,^,chroot . /usr/bin/mandb -f "/,' \
      -e 's,$," \&>/dev/null,' \
  >> install/doinst.sh

/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
