diff --git a/Makefile b/Makefile
index dbf510a..cb4ecf0 100644
--- a/Makefile
+++ b/Makefile
@@ -97,6 +97,8 @@ GLOBAL_CXXFLAGS += -g -Wall -Wdeprecated-copy -Wignored-qualifiers -Wimplicit-fa
 
 # Include the main lib, causing rules to be defined
 
+GLOBAL_CFLAGS += $(CPPFLAGS)
+
 include mk/lib.mk
 
 # Fallback stub rules for better UX when things are disabled
diff --git a/configure.ac b/configure.ac
index 9858159..7af758f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -414,7 +414,8 @@ AC_CHECK_FUNCS([strsignal posix_fallocate sysconf])
 AC_ARG_WITH(sandbox-shell, AS_HELP_STRING([--with-sandbox-shell=PATH],[path of a statically-linked shell to use as /bin/sh in sandboxes]),
   sandbox_shell=$withval)
 AC_SUBST(sandbox_shell)
-if test ${cross_compiling:-no} = no && ! test -z ${sandbox_shell+x}; then
+if test ${cross_compiling:-no} = no && test -n "${sandbox_shell}" &&
+   test -z "${sandbox_shell%%*busybox*}"; then
   AC_MSG_CHECKING([whether sandbox-shell has the standalone feature])
   # busybox shell sometimes allows executing other busybox applets,
   # even if they are not in the path, breaking our sandbox
diff --git a/doc/manual/local.mk b/doc/manual/local.mk
index fcc50f4..747a54a 100644
--- a/doc/manual/local.mk
+++ b/doc/manual/local.mk
@@ -24,15 +24,18 @@ man-pages += $(foreach subcommand, \
 	$(filter-out %opt-common.md %env-common.md, $(wildcard $(d)/src/command-ref/nix-*/*.md)), \
 	$(d)/$(subst /,-,$(subst $(d)/src/command-ref/,,$(subst .md,.1,$(subcommand)))))
 
-clean-files += $(d)/*.1 $(d)/*.5 $(d)/*.8
+clean-files += $(d)/*.1 $(d)/generated/man1/*.1 $(d)/*.5 $(d)/*.8
+clean-files += $(d)/*.json
 
 # Provide a dummy environment for nix, so that it will not access files outside the macOS sandbox.
 # Set cores to 0 because otherwise `nix config show` resolves the cores based on the current machine
+dum_DIR := $(realpath $(nix_DIR))
+
 dummy-env = env -i \
-	HOME=/dummy \
-	NIX_CONF_DIR=/dummy \
-	NIX_SSL_CERT_FILE=/dummy/no-ca-bundle.crt \
-	NIX_STATE_DIR=/dummy \
+	HOME=$(dum_DIR)/dummy \
+	NIX_CONF_DIR=$(dum_DIR)/dummy \
+	NIX_SSL_CERT_FILE=$(dum_DIR)/dummy/no-ca-bundle.crt \
+	NIX_STATE_DIR=$(dum_DIR)/dummy \
 	NIX_CONFIG='cores = 0'
 
 nix-eval = $(dummy-env) $(doc_nix) eval --experimental-features nix-command -I nix=doc/manual --store dummy:// --impure --raw
@@ -111,11 +114,15 @@ $(d)/src/command-ref/new-cli: $(d)/nix.json $(d)/utils.nix $(d)/generate-manpage
 	$(trace-gen) $(nix-eval) --write-to $@.tmp --expr 'import doc/manual/generate-manpage.nix true (builtins.readFile $<)'
 	@mv $@.tmp $@
 
+clean-files += $(d)/src/command-ref/new-cli/*.md
+
 $(d)/src/command-ref/conf-file.md: $(d)/conf-file.json $(d)/utils.nix $(d)/generate-settings.nix $(d)/src/command-ref/conf-file-prefix.md $(d)/src/command-ref/experimental-features-shortlist.md $(doc_nix)
 	@cat doc/manual/src/command-ref/conf-file-prefix.md > $@.tmp
 	$(trace-gen) $(nix-eval) --expr 'import doc/manual/generate-settings.nix { prefix = "conf"; } (builtins.fromJSON (builtins.readFile $<))' >> $@.tmp;
 	@mv $@.tmp $@
 
+clean-files += $(d)/src/command-ref/conf-file.md
+
 $(d)/nix.json: $(doc_nix)
 	$(trace-gen) $(dummy-env) $(doc_nix) __dump-cli > $@.tmp
 	@mv $@.tmp $@
@@ -124,30 +131,42 @@ $(d)/conf-file.json: $(doc_nix)
 	$(trace-gen) $(dummy-env) $(doc_nix) config show --json --experimental-features nix-command > $@.tmp
 	@mv $@.tmp $@
 
+clean-files += $(d)/conf-file.json
+
 $(d)/src/development/experimental-feature-descriptions.md: $(d)/xp-features.json $(d)/utils.nix $(d)/generate-xp-features.nix $(doc_nix)
 	@rm -rf $@ $@.tmp
 	$(trace-gen) $(nix-eval) --write-to $@.tmp --expr 'import doc/manual/generate-xp-features.nix (builtins.fromJSON (builtins.readFile $<))'
 	@mv $@.tmp $@
 
+clean-files += $(d)/src/development/experimental-feature-descriptions.md
+
 $(d)/src/command-ref/experimental-features-shortlist.md: $(d)/xp-features.json $(d)/utils.nix $(d)/generate-xp-features-shortlist.nix $(doc_nix)
 	@rm -rf $@ $@.tmp
 	$(trace-gen) $(nix-eval) --write-to $@.tmp --expr 'import doc/manual/generate-xp-features-shortlist.nix (builtins.fromJSON (builtins.readFile $<))'
 	@mv $@.tmp $@
 
+clean-files += $(d)/src/command-ref/experimental-features-shortlist.md
+
 $(d)/xp-features.json: $(doc_nix)
 	$(trace-gen) $(dummy-env) $(doc_nix) __dump-xp-features > $@.tmp
 	@mv $@.tmp $@
 
+clean-files += $(d)/xp-features.json
+
 $(d)/src/language/builtins.md: $(d)/language.json $(d)/generate-builtins.nix $(d)/src/language/builtins-prefix.md $(doc_nix)
 	@cat doc/manual/src/language/builtins-prefix.md > $@.tmp
 	$(trace-gen) $(nix-eval) --expr 'import doc/manual/generate-builtins.nix (builtins.fromJSON (builtins.readFile $<))' >> $@.tmp;
 	@cat doc/manual/src/language/builtins-suffix.md >> $@.tmp
 	@mv $@.tmp $@
 
+clean-files += $(d)/src/language/builtins.md
+
 $(d)/language.json: $(doc_nix)
 	$(trace-gen) $(dummy-env) $(doc_nix) __dump-language > $@.tmp
 	@mv $@.tmp $@
 
+clean-files += $(d)/language.json
+
 # Generate "Upcoming release" notes (or clear it and remove from menu)
 $(d)/src/release-notes/rl-next.md: $(d)/rl-next $(d)/rl-next/*
 	@if type -p changelog-d > /dev/null; then \
@@ -158,6 +177,8 @@ $(d)/src/release-notes/rl-next.md: $(d)/rl-next $(d)/rl-next/*
 		true > $@; \
 	fi
 
+clean-files += $(d)/src/release-notes/rl-next.md
+
 $(d)/src/SUMMARY-rl-next.md: $(d)/src/release-notes/rl-next.md
 	$(trace-gen) true
 	@if [ -s $< ]; then \
@@ -166,6 +187,8 @@ $(d)/src/SUMMARY-rl-next.md: $(d)/src/release-notes/rl-next.md
 	  true > $@; \
 	fi
 
+clean-files += $(d)/src/SUMMARY-rl-next.md
+
 # Generate the HTML manual.
 .PHONY: manual-html
 manual-html: $(docdir)/manual/index.html
@@ -212,20 +235,3 @@ doc/manual/generated/man1/nix3-manpages: $(d)/src/command-ref/new-cli
 # FIXME: maybe contributing guides should live right next to the code
 # instead of in the manual
 $(docdir)/manual/index.html: $(MANUAL_SRCS) $(d)/book.toml $(d)/anchors.jq $(d)/custom.css $(d)/src/SUMMARY.md $(d)/src/store/types $(d)/src/command-ref/new-cli $(d)/src/development/experimental-feature-descriptions.md $(d)/src/command-ref/conf-file.md $(d)/src/language/builtins.md $(d)/src/release-notes/rl-next.md $(d)/src/figures $(d)/src/favicon.png $(d)/src/favicon.svg
-	$(trace-gen) \
-		tmp="$$(mktemp -d)"; \
-		cp -r doc/manual "$$tmp"; \
-		find "$$tmp" -name '*.md' | while read -r file; do \
-			$(call process-includes,$$file,$$file); \
-		done; \
-		find "$$tmp" -name '*.md' ! -name 'documentation.md' | while read -r file; do \
-			docroot="$$(realpath --relative-to="$$(dirname "$$file")" $$tmp/manual/src)"; \
-			sed -i "s,@docroot@,$$docroot,g" "$$file"; \
-		done; \
-		set -euo pipefail; \
-		RUST_LOG=warn mdbook build "$$tmp/manual" -d $(DESTDIR)$(docdir)/manual.tmp 2>&1 \
-			| { grep -Fv "because fragment resolution isn't implemented" || :; }; \
-		rm -rf "$$tmp/manual"
-	@rm -rf $(DESTDIR)$(docdir)/manual
-	@mv $(DESTDIR)$(docdir)/manual.tmp/html $(DESTDIR)$(docdir)/manual
-	@rm -rf $(DESTDIR)$(docdir)/manual.tmp
diff --git a/src/libexpr/local.mk b/src/libexpr/local.mk
index 68518e1..87dff0c 100644
--- a/src/libexpr/local.mk
+++ b/src/libexpr/local.mk
@@ -38,7 +38,13 @@ $(d)/parser-tab.cc $(d)/parser-tab.hh: $(d)/parser.y
 $(d)/lexer-tab.cc $(d)/lexer-tab.hh: $(d)/lexer.l
 	$(trace-gen) flex --outfile $(libexpr_DIR)/lexer-tab.cc --header-file=$(libexpr_DIR)/lexer-tab.hh $<
 
-clean-files += $(d)/parser-tab.cc $(d)/parser-tab.hh $(d)/lexer-tab.cc $(d)/lexer-tab.hh
+clean-files += \
+  $(d)/fetchurl.nix.gen.hh \
+  $(d)/flake/call-flake.nix.gen.hh \
+  $(d)/imported-drv-to-derivation.nix.gen.hh \
+  $(d)/primops/derivation.nix.gen.hh \
+  $(d)/parser-tab.cc $(d)/parser-tab.hh $(d)/parser-tab.output \
+  $(d)/lexer-tab.cc $(d)/lexer-tab.hh
 
 $(eval $(call install-file-in, $(buildprefix)$(d)/nix-expr.pc, $(libdir)/pkgconfig, 0644))
 
diff --git a/src/nix/local.mk b/src/nix/local.mk
index 28b30b5..d4afa1f 100644
--- a/src/nix/local.mk
+++ b/src/nix/local.mk
@@ -42,16 +42,29 @@ $(eval $(call install-symlink, $(bindir)/nix, $(libexecdir)/nix/build-remote))
 
 src/nix-env/user-env.cc: src/nix-env/buildenv.nix.gen.hh
 
+clean-files += src/nix-env/buildenv.nix.gen.hh
+
 $(d)/develop.cc: $(d)/get-env.sh.gen.hh
 
+clean-files += $(d)/get-env.sh.gen.hh
+
 src/nix-channel/nix-channel.cc: src/nix-channel/unpack-channel.nix.gen.hh
 
+clean-files += src/nix-channel/unpack-channel.nix.gen.hh
+
 $(d)/main.cc: \
   doc/manual/generate-manpage.nix.gen.hh \
   doc/manual/utils.nix.gen.hh doc/manual/generate-settings.nix.gen.hh \
   doc/manual/generate-store-info.nix.gen.hh \
   $(d)/help-stores.md.gen.hh
 
+clean-files += doc/manual/generate-manpage.nix.gen.hh \
+  doc/manual/utils.nix.gen.hh doc/manual/generate-settings.nix.gen.hh \
+  doc/manual/generate-store-info.nix.gen.hh \
+  $(d)/help-stores.md.gen.hh
+
 $(d)/profile.cc: $(d)/profile.md
 
 $(d)/profile.md: $(d)/profiles.md.gen.hh
+
+clean-files += $(d)/profiles.md.gen.hh
